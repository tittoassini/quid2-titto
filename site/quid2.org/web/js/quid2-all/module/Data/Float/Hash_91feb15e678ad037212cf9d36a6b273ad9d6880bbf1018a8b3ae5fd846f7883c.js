goog.provide('quid2.module.Data.Float.Hash_91feb15e678ad037212cf9d36a6b273ad9d6880bbf1018a8b3ae5fd846f7883c');
goog.require('quid2.std');
goog.require('quid2.module.Data.Bool.Hash_5d101ff369e98815dcded54163ac4efd6578b24bfed5ef4c8677055babb73152');
goog.require('quid2.module.Data.Ratio.Hash_1a755cc7ebaf74a314f8a9f976289c1ab76137cc5d9a83e7d92f113f2af93b42');

quid2.module.Data.Float.Hash_91feb15e678ad037212cf9d36a6b273ad9d6880bbf1018a8b3ae5fd846f7883c = (function () {
var s = quid2.std;
/*
timesFloat::Float -> Float -> Float
tanhFloat::Float -> Float
tanFloat::Float -> Float
sqrtFloat::Float -> Float
sinhFloat::Float -> Float
sinFloat::Float -> Float
powerFloat::Float -> Float -> Float
plusFloat::Float -> Float -> Float
negateFloat::Float -> Float
neFloat::Float -> Float -> Data.Bool.Hash_5d101ff369e98815dcded54163ac4efd6578b24bfed5ef4c8677055babb73152.Bool
minusFloat::Float -> Float -> Float
ltFloat::Float -> Float -> Data.Bool.Hash_5d101ff369e98815dcded54163ac4efd6578b24bfed5ef4c8677055babb73152.Bool
logFloat::Float -> Float
leFloat::Float -> Float -> Data.Bool.Hash_5d101ff369e98815dcded54163ac4efd6578b24bfed5ef4c8677055babb73152.Bool
gtFloat::Float -> Float -> Data.Bool.Hash_5d101ff369e98815dcded54163ac4efd6578b24bfed5ef4c8677055babb73152.Bool
geFloat::Float -> Float -> Data.Bool.Hash_5d101ff369e98815dcded54163ac4efd6578b24bfed5ef4c8677055babb73152.Bool
expFloat::Float -> Float
eqFloat::Float -> Float -> Data.Bool.Hash_5d101ff369e98815dcded54163ac4efd6578b24bfed5ef4c8677055babb73152.Bool
divideFloat::Float -> Float -> Float
coshFloat::Float -> Float
cosFloat::Float -> Float
atanFloat::Float -> Float
asinFloat::Float -> Float
acosFloat::Float -> Float
absFloat::Float -> Float
fromIntegerFloat::Integer -> Float
fromRationalFloat::Data.Ratio.Hash_1a755cc7ebaf74a314f8a9f976289c1ab76137cc5d9a83e7d92f113f2af93b42.Ratio Integer -> Float
floatRadixFloat::Float -> Integer
floatDigitsFloat::Float -> Int64
floatRangeFloat::Float -> (Int64,Int64)
decodeFloatFloat::Float -> (Integer,Int64)
encodeFloatFloat::Integer -> Int64 -> Float
exponentFloat::Float -> Int64
significandFloat::Float -> Float
scaleFloatFloat::Int64 -> Float -> Float
isNaNFloat::Float -> Data.Bool.Hash_5d101ff369e98815dcded54163ac4efd6578b24bfed5ef4c8677055babb73152.Bool
isInfiniteFloat::Float -> Data.Bool.Hash_5d101ff369e98815dcded54163ac4efd6578b24bfed5ef4c8677055babb73152.Bool
isDenormalizedFloat::Float -> Data.Bool.Hash_5d101ff369e98815dcded54163ac4efd6578b24bfed5ef4c8677055babb73152.Bool
isNegativeZeroFloat::Float -> Data.Bool.Hash_5d101ff369e98815dcded54163ac4efd6578b24bfed5ef4c8677055babb73152.Bool
isIEEEFloat::Float -> Data.Bool.Hash_5d101ff369e98815dcded54163ac4efd6578b24bfed5ef4c8677055babb73152.Bool
atan2Float::Float -> Float -> Float
*/
return s.defs("Data.Float.Hash_91feb15e678ad037212cf9d36a6b273ad9d6880bbf1018a8b3ae5fd846f7883c",{atan2Float:[2,3,2,17,2,3,2,17,17,0,0],isIEEEFloat:[2,3,2,17,0,0,79,68,97,116,97,46,66,111,111,108,46,72,97,115,104,95,53,100,49,48,49,102,102,51,54,57,101,57,56,56,49,53,100,99,100,101,100,53,52,49,54,51,97,99,52,101,102,100,54,53,55,56,98,50,52,98,102,101,100,53,101,102,52,99,56,54,55,55,48,53,53,98,97,98,98,55,51,49,53,50,0,0,4,66,111,111,108,0,0],isNegativeZeroFloat:[2,3,2,17,0,0,79,68,97,116,97,46,66,111,111,108,46,72,97,115,104,95,53,100,49,48,49,102,102,51,54,57,101,57,56,56,49,53,100,99,100,101,100,53,52,49,54,51,97,99,52,101,102,100,54,53,55,56,98,50,52,98,102,101,100,53,101,102,52,99,56,54,55,55,48,53,53,98,97,98,98,55,51,49,53,50,0,0,4,66,111,111,108,0,0],isDenormalizedFloat:[2,3,2,17,0,0,79,68,97,116,97,46,66,111,111,108,46,72,97,115,104,95,53,100,49,48,49,102,102,51,54,57,101,57,56,56,49,53,100,99,100,101,100,53,52,49,54,51,97,99,52,101,102,100,54,53,55,56,98,50,52,98,102,101,100,53,101,102,52,99,56,54,55,55,48,53,53,98,97,98,98,55,51,49,53,50,0,0,4,66,111,111,108,0,0],isInfiniteFloat:[2,3,2,17,0,0,79,68,97,116,97,46,66,111,111,108,46,72,97,115,104,95,53,100,49,48,49,102,102,51,54,57,101,57,56,56,49,53,100,99,100,101,100,53,52,49,54,51,97,99,52,101,102,100,54,53,55,56,98,50,52,98,102,101,100,53,101,102,52,99,56,54,55,55,48,53,53,98,97,98,98,55,51,49,53,50,0,0,4,66,111,111,108,0,0],isNaNFloat:[2,3,2,17,0,0,79,68,97,116,97,46,66,111,111,108,46,72,97,115,104,95,53,100,49,48,49,102,102,51,54,57,101,57,56,56,49,53,100,99,100,101,100,53,52,49,54,51,97,99,52,101,102,100,54,53,55,56,98,50,52,98,102,101,100,53,101,102,52,99,56,54,55,55,48,53,53,98,97,98,98,55,51,49,53,50,0,0,4,66,111,111,108,0,0],scaleFloatFloat:[2,3,2,16,2,3,2,17,17,0,0],significandFloat:[2,3,2,17,17,0],exponentFloat:[2,3,2,17,16,0],encodeFloatFloat:[2,3,2,19,2,3,2,16,17,0,0],decodeFloatFloat:[2,3,2,17,2,4,2,2,19,16,0,0],floatRangeFloat:[2,3,2,17,2,4,2,2,16,16,0,0],floatDigitsFloat:[2,3,2,17,16,0],floatRadixFloat:[2,3,2,17,19,0],fromRationalFloat:[2,3,2,2,0,0,80,68,97,116,97,46,82,97,116,105,111,46,72,97,115,104,95,49,97,55,53,53,99,99,55,101,98,97,102,55,52,97,51,49,52,102,56,97,57,102,57,55,54,50,56,57,99,49,97,98,55,54,49,51,55,99,99,53,100,57,97,56,51,101,55,100,57,50,102,49,49,51,102,50,97,102,57,51,98,52,50,0,0,5,82,97,116,105,111,0,1,19,0,17,0],fromIntegerFloat:[2,3,2,19,17,0],absFloat:[2,3,2,17,17,0],acosFloat:[2,3,2,17,17,0],asinFloat:[2,3,2,17,17,0],atanFloat:[2,3,2,17,17,0],cosFloat:[2,3,2,17,17,0],coshFloat:[2,3,2,17,17,0],divideFloat:[2,3,2,17,2,3,2,17,17,0,0],eqFloat:[2,3,2,17,2,3,2,17,0,0,79,68,97,116,97,46,66,111,111,108,46,72,97,115,104,95,53,100,49,48,49,102,102,51,54,57,101,57,56,56,49,53,100,99,100,101,100,53,52,49,54,51,97,99,52,101,102,100,54,53,55,56,98,50,52,98,102,101,100,53,101,102,52,99,56,54,55,55,48,53,53,98,97,98,98,55,51,49,53,50,0,0,4,66,111,111,108,0,0,0],expFloat:[2,3,2,17,17,0],geFloat:[2,3,2,17,2,3,2,17,0,0,79,68,97,116,97,46,66,111,111,108,46,72,97,115,104,95,53,100,49,48,49,102,102,51,54,57,101,57,56,56,49,53,100,99,100,101,100,53,52,49,54,51,97,99,52,101,102,100,54,53,55,56,98,50,52,98,102,101,100,53,101,102,52,99,56,54,55,55,48,53,53,98,97,98,98,55,51,49,53,50,0,0,4,66,111,111,108,0,0,0],gtFloat:[2,3,2,17,2,3,2,17,0,0,79,68,97,116,97,46,66,111,111,108,46,72,97,115,104,95,53,100,49,48,49,102,102,51,54,57,101,57,56,56,49,53,100,99,100,101,100,53,52,49,54,51,97,99,52,101,102,100,54,53,55,56,98,50,52,98,102,101,100,53,101,102,52,99,56,54,55,55,48,53,53,98,97,98,98,55,51,49,53,50,0,0,4,66,111,111,108,0,0,0],leFloat:[2,3,2,17,2,3,2,17,0,0,79,68,97,116,97,46,66,111,111,108,46,72,97,115,104,95,53,100,49,48,49,102,102,51,54,57,101,57,56,56,49,53,100,99,100,101,100,53,52,49,54,51,97,99,52,101,102,100,54,53,55,56,98,50,52,98,102,101,100,53,101,102,52,99,56,54,55,55,48,53,53,98,97,98,98,55,51,49,53,50,0,0,4,66,111,111,108,0,0,0],logFloat:[2,3,2,17,17,0],ltFloat:[2,3,2,17,2,3,2,17,0,0,79,68,97,116,97,46,66,111,111,108,46,72,97,115,104,95,53,100,49,48,49,102,102,51,54,57,101,57,56,56,49,53,100,99,100,101,100,53,52,49,54,51,97,99,52,101,102,100,54,53,55,56,98,50,52,98,102,101,100,53,101,102,52,99,56,54,55,55,48,53,53,98,97,98,98,55,51,49,53,50,0,0,4,66,111,111,108,0,0,0],minusFloat:[2,3,2,17,2,3,2,17,17,0,0],neFloat:[2,3,2,17,2,3,2,17,0,0,79,68,97,116,97,46,66,111,111,108,46,72,97,115,104,95,53,100,49,48,49,102,102,51,54,57,101,57,56,56,49,53,100,99,100,101,100,53,52,49,54,51,97,99,52,101,102,100,54,53,55,56,98,50,52,98,102,101,100,53,101,102,52,99,56,54,55,55,48,53,53,98,97,98,98,55,51,49,53,50,0,0,4,66,111,111,108,0,0,0],negateFloat:[2,3,2,17,17,0],plusFloat:[2,3,2,17,2,3,2,17,17,0,0],powerFloat:[2,3,2,17,2,3,2,17,17,0,0],sinFloat:[2,3,2,17,17,0],sinhFloat:[2,3,2,17,17,0],sqrtFloat:[2,3,2,17,17,0],tanFloat:[2,3,2,17,17,0],tanhFloat:[2,3,2,17,17,0],timesFloat:[2,3,2,17,2,3,2,17,17,0,0]},{},[quid2.module.Data.Bool.Hash_5d101ff369e98815dcded54163ac4efd6578b24bfed5ef4c8677055babb73152,quid2.module.Data.Ratio.Hash_1a755cc7ebaf74a314f8a9f976289c1ab76137cc5d9a83e7d92f113f2af93b42]);
})();
