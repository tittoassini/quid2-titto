Pandoc (Meta {unMeta = fromList [("author",MetaList [MetaInlines [Str "Pasqualino",Space,Str "`Titto'",Space,Str "Assini",Space,Str "(tittoassini@gmail.com)"]]),("date",MetaInlines [Str "1",Superscript [Str "st"],Space,Str "of",Space,Str "May",Space,Str "2017"]),("title",MetaInlines [Str "\27491\21517",Space,Str "Zh\232ng",Space,Str "M\237ng",Space,Str "(Draft)"])]}) [Header 2 ("what-is-\27491\21517-zh\232ng-m\237ng",[],[]) [Str "What",Space,Str "is",Space,Str "\27491\21517",Space,Str "(Zh\232ng",Space,Str "M\237ng)?"],Para [Str "\27491\21517",Space,Str "(read",Space,Str "as:",Space,Link ("",[],[]) [Str "Zh\232ng",Space,Str "M\237ng"] ("https://translate.google.com/#auto/en/%E6%AD%A3%E5%90%8D",""),Str ")",Space,Str "is",Space,Str "a",Space,Str "minimalistic,",Space,Str "expressive",Space,Str "and",Space,Str "language",Space,Str "independent",Space,Str "data",Space,Str "modelling",Space,Str "language."],Para [Str "It",Space,Str "provides",Space,Str "a",Space,Str "way",Space,Str "to:"],BulletList [[Plain [Str "indicate",Space,Str "the",Space,Str "semantic",Space,Str "of",Space,Str "a",Space,Str "data",Space,Str "type"]],[Plain [Str "precisely",Space,Str "define",Space,Str "the",Space,Str "syntactical",Space,Str "structure",Space,Str "of",Space,Str "a",Space,Str "data",Space,Str "type"]],[Plain [Str "precisely",Space,Str "define",Space,Str "the",Space,Str "binary",Space,Str "serialisation",Space,Str "of",Space,Str "the",Space,Str "values",Space,Str "of",Space,Str "a",Space,Str "data",Space,Str "type"]],[Plain [Str "deterministically",Space,Str "calculate",Space,Str "a",Space,Str "compact",Space,Str "and",Space,Str "globally",Space,Str "unique",Space,Str "data",Space,Str "type",Space,Str "identifier"]]],Para [Str "It",Space,Str "can",Space,Str "be",Space,Str "used:"],BulletList [[Plain [Str "for",Space,Str "data",Space,Str "exchange",Space,Str "across",Space,Str "different",Space,Str "programming",Space,Str "languages",Space,Str "and",Space,Str "software",Space,Str "systems"]],[Plain [Str "for",Space,Str "long",Space,Str "term",Space,Str "data",Space,Str "preservation"]]],Para [Str "\27491\21517",Space,Str "literally",Space,Str "means",Space,Str "'true",Space,Str "or",Space,Str "official",Space,Str "name'.",Space,Str "It",Space,Str "also",Space,Str "refers",Space,Str "to",Space,Str "the",Space,Str "Confucian",Space,Str "doctrine",Space,Str "of",Space,Str "the",Space,Str "'rectification",Space,Str "of",Space,Str "names'.",Space,Str "Confucius",Space,Str "thought",Space,Str "that",Space,Str "\"",Emph [Str "If",Space,Str "names",Space,Str "be",Space,Str "not",Space,Str "correct,",Space,Str "language",Space,Str "is",Space,Str "not",Space,Str "in",Space,Str "accordance",Space,Str "with",Space,Str "the",Space,Str "truth",Space,Str "of",Space,Str "things.",Space,Str "If",Space,Str "language",Space,Str "be",Space,Str "not",Space,Str "in",Space,Str "accordance",Space,Str "with",Space,Str "the",Space,Str "truth",Space,Str "of",Space,Str "things,",Space,Str "affairs",Space,Str "cannot",Space,Str "be",Space,Str "carried",Space,Str "on",Space,Str "to",Space,Str "success."],Str "\"."],Para [Str "If",Space,Str "there",Space,Str "isn't",Space,Str "a",Space,Str "straightforward",Space,Str "relationship",Space,Str "between",Space,Str "names",Space,Str "and",Space,Str "what",Space,Str "they",Space,Str "refer",Space,Str "to,",Space,Str "confusion",Space,Str "arises",Space,Str "and",Space,Str "understanding",Space,Str "and",Space,Str "coordination",Space,Str "becomes",Space,Str "impossible.",Space,Str "Getting",Space,Str "the",Space,Str "names",Space,Str "right",Space,Str "is",Space,Str "just",Space,Str "as",Space,Str "important",Space,Str "in",Space,Str "21st",Space,Str "century",Space,Str "information",Space,Str "systems",Space,Str "as",Space,Str "it",Space,Str "was",Space,Str "in",Space,Str "6th",Space,Str "century",Space,Str "BC",Space,Str "Chinese",Space,Str "philosophy."],Para [Str "\27491\21517",Space,Str "provides",Space,Str "a",Space,Str "simple",Space,Str "way",Space,Str "to",Space,Str "define",Space,Str "concepts",Space,Str "(as",Space,Str "data",Space,Str "types)",Space,Str "and",Space,Str "assign",Space,Str "them",Space,Str "\"true",Space,Str "names\",",Space,Str "that's",Space,Str "to",Space,Str "say",Space,Str "globally",Space,Str "unique",Space,Str "and",Space,Str "unambiguous",Space,Str "identifiers."],Header 2 ("data-modelling",[],[]) [Str "Data",Space,Str "Modelling"],Para [Str "\27491\21517",Space,Str "defines",Space,Str "a",Space,Str "model",Space,Str "of",Space,Str "algebraic",Space,Str "datatypes."],Para [Str "An",Space,Link ("",[],[]) [Str "algebraic",Space,Str "type"] ("https://en.wikipedia.org/wiki/Algebraic_data_type",""),Space,Str "combines",Space,Str "two",Space,Str "key",Space,Str "mechanisms",Space,Str "to",Space,Str "define",Space,Str "data",Space,Str "types:"],BulletList [[Plain [Str "sum:",Space,Str "choice",Space,Str "among",Space,Str "multiple",Space,Str "variants"]],[Plain [Str "product:",Space,Str "sequencing",Space,Str "of",Space,Str "multiple",Space,Str "values"]]],Para [Str "An",Space,Str "example",Space,Str "of",Space,Str "a",Space,Str "sum",Space,Str "type",Space,Str "is:"],CodeBlock ("",["haskell"],[]) "Boolean \8801 False\n        | True",Para [Str "This",Space,Str "definition",Space,Str "introduces",Space,Str "a",Space,Str "new",Space,Str "data",Space,Str "type",Space,Code ("",[],[]) "Boolean",Space,Str "with",Space,Str "two",Space,Str "possible",Space,Str "values:",Space,Code ("",[],[]) "False",Space,Str "and",Space,Code ("",[],[]) "True",Space,Str "('|'",Space,Str "separates",Space,Str "the",Space,Str "different",Space,Str "choices)."],Para [Code ("",[],[]) "False",Space,Str "and",Space,Code ("",[],[]) "True",Space,Str "are",Space,Str "called",Space,Str "constructors",Space,Str "as",Space,Str "they",Space,Str "construct",Space,Str "values."],Para [Str "The",Space,Str "constructor",Space,Str "names",Space,Str "must",Space,Str "obviously",Space,Str "be",Space,Str "unique",Space,Str "for",Space,Str "every",Space,Str "data",Space,Str "type."],Para [Str "A",Space,Str "datatype",Space,Str "without",Space,Str "constructors",Space,Str "and",Space,Str "therefore",Space,Str "no",Space,Str "values",Space,Str "is",Space,Str "also",Space,Str "admissable:"],CodeBlock ("",["haskell"],[]) "Void",Para [Str "An",Space,Str "example",Space,Str "of",Space,Str "a",Space,Str "product",Space,Str "type",Space,Str "is:"],CodeBlock ("",["haskell"],[]) "Tuple \8801 Tuple Bool Bool",Para [Str "This",Space,Str "definition",Space,Str "introduces",Space,Str "a",Space,Str "new",Space,Str "data",Space,Str "type",Space,Code ("",[],[]) "Tuple",Space,Str "whose",Space,Str "values",Space,Str "are",Space,Str "all",Space,Str "the",Space,Str "possible",Space,Str "combinations",Space,Str "(the",Space,Str "cartesian",Space,Str "product)",Space,Str "of",Space,Str "two",Space,Str "booleans,",Space,Str "introduced",Space,Str "by",Space,Str "the",Space,Str "constructor",Space,Code ("",[],[]) "Tuple",Str ":",Space,Code ("",[],[]) "Tuple False False, Tuple False True, Tuple True False, Tuple True True",Str "."],Para [Str "Note",Space,Str "that",Space,Str "the",Space,Str "datatype",Space,Str "name",Space,Str "can",Space,Str "be",Space,Str "the",Space,Str "same",Space,Str "as",Space,Str "the",Space,Str "name",Space,Str "of",Space,Str "one",Space,Str "of",Space,Str "its",Space,Str "constructors."],Para [Str "The",Space,Str "fields",Space,Str "of",Space,Str "a",Space,Str "constructor",Space,Str "can,",Space,Str "optionally,",Space,Str "be",Space,Str "assigned",Space,Str "names:"],CodeBlock ("",["haskell"],[]) "FullName \8801 FullName {firstName::String,familyName::String}",Para [Str "This",Space,Str "definition",Space,Str "introduces",Space,Str "a",Space,Str "new",Space,Str "data",Space,Str "type",Space,Code ("",[],[]) "FullName",Space,Str "with",Space,Str "a",Space,Str "single",Space,Str "constructor",Space,Code ("",[],[]) "FullName",Space,Str "with",Space,Str "two",Space,Str "fields",Space,Str "of",Space,Str "type",Space,Code ("",[],[]) "String",Str ",",Space,Str "called",Space,Code ("",[],[]) "firstName",Space,Str "and",Space,Code ("",[],[]) "familyName",Str ".",Space,Str "A",Space,Str "possible",Space,Str "value",Space,Str "of",Space,Str "this",Space,Str "type",Space,Str "would",Space,Str "be",Space,Code ("",[],[]) "FullName {firstName=\"Leonardo\",fullName=\"Da Vinci\"}",Space,Str "or",Space,Str "equivalently",Space,Code ("",[],[]) "FullName \"Leonardo\" \"Da Vinci\"",Str "."],Para [Str "Datatypes",Space,Str "can",Space,Str "be",Space,Str "recursive,",Space,Str "as",Space,Str "in",Space,Str "this",Space,Str "representation",Space,Str "of",Space,Str "the",Space,Str "natural",Space,Str "numbers:"],CodeBlock ("",["haskell"],[]) "Natural \8801 Zero | Succ Natural",Para [Str "The",Space,Str "(infinite)",Space,Str "valid",Space,Str "values",Space,Str "for",Space,Str "this",Space,Str "type",Space,Str "are:",Space,Code ("",[],[]) "Zero, Succ Zero, Succ (Succ Zero), Succ (Succ (Succ Zero))",Space,Str "and",Space,Str "so",Space,Str "on."],Para [Str "Mutually",Space,Str "recursive",Space,Str "data",Space,Str "types",Space,Str "however,",Space,Str "are",Space,Str "not",Space,Str "allowed,",Space,Str "these",Space,Str "definitions",Space,Str "are",Space,Str "invalid:"],CodeBlock ("",["haskell"],[]) "Forest \8801 Nil\n       | Cons Tree Forest\n\nTree \8801 Empty\n     | Node String Forest",Para [Str "Data",Space,Str "types",Space,Str "can",Space,Str "take",Space,Str "other",Space,Str "types",Space,Str "as",Space,Str "parameters:"],CodeBlock ("",["haskell"],[]) "Maybe a \8801 Nothing\n        | Just a",Para [Str "Parametric",Space,Str "data",Space,Str "types",Space,Str "are",Space,Str "abstract,",Space,Str "they",Space,Str "have",Space,Str "no",Space,Str "values."],Para [Str "Concrete",Space,Str "data",Space,Str "types",Space,Str "are",Space,Str "build",Space,Str "by",Space,Str "substituting",Space,Str "the",Space,Str "parameters",Space,Str "with",Space,Str "concrete",Space,Str "types:",Space,Code ("",[],[]) "Maybe Bool",Str ",",Space,Code ("",[],[]) "Maybe Natural",Space,Str "and",Space,Str "so",Space,Str "on."],Para [Str "The",Space,Str "valid",Space,Str "values",Space,Str "of",Space,Code ("",[],[]) "Maybe Bool",Space,Str "are:",Space,Code ("",[],[]) "Nothing, Just False, Just True",Str "."],Para [Str "A",Space,Str "data",Space,Str "type",Space,Str "can",Space,Str "have",Space,Str "multiple",Space,Str "parameters",Space,Str "(up",Space,Str "to",Space,Str "a",Space,Str "maximum",Space,Str "of",Space,Str "255):"],CodeBlock ("",["haskell"],[]) "Either a b  \8801 Left a\n            | Right b",Para [Str "The",Space,Str "data",Space,Str "type",Space,Str "parameters",Space,Str "do",Space,Str "not",Space,Str "necessarily",Space,Str "appear",Space,Str "in",Space,Str "the",Space,Str "right",Space,Str "side",Space,Str "of",Space,Str "a",Space,Str "data",Space,Str "type",Space,Str "definition."],Para [Str "For",Space,Str "example",Space,Str "in",Space,Str "the",Space,Str "following",Space,Str "pointer",Space,Str "type,",Space,Str "we",Space,Str "use",Space,Str "the",Space,Str "parameter",Space,Str "to",Space,Str "specify",Space,Str "the",Space,Str "type",Space,Str "of",Space,Str "the",Space,Str "value",Space,Str "we",Space,Str "are",Space,Str "pointing",Space,Str "to:",Space,Code ("",[],[]) "Ptr Bool",Str ",",Space,Code ("",[],[]) "Ptr String",Str "."],CodeBlock ("",["haskell"],[]) "Ptr a  \8801 Ptr Address",Para [Str "Data",Space,Str "types",Space,Str "and",Space,Str "constructor",Space,Str "names",Space,Str "can",Space,Str "be",Space,Str "either",Space,Str "literal",Space,Str "(a",Space,Str "unicode",Space,Str "letter",Space,Str "followed",Space,Str "by",Space,Str "a",Space,Str "sequence",Space,Str "of",Space,Str "letters",Space,Str "or",Space,Str "numbers",Space,Str "or",Space,Str "the",Space,Str "special",Space,Str "character",Space,Code ("",[],[]) "_",Str ")",Space,Str "or",Space,Str "symbolic",Space,Str "(a",Space,Str "sequence",Space,Str "of",Space,Str "unicode",Space,Str "symbols)."],Para [Str "An",Space,Str "example",Space,Str "of",Space,Str "a",Space,Str "parametric",Space,Str "and",Space,Str "recursive",Space,Str "nested",Space,Str "datatype",Space,Str "(a",Space,Str "list",Space,Str "type)",Space,Str "with",Space,Str "literal",Space,Str "names:"],CodeBlock ("",["haskell"],[]) "List a \8801 Nil               -- An empty list.\n       | Cons a (List a)   -- A list: a value followed by another list.",Para [Str "An",Space,Str "equivalent",Space,Str "list",Space,Str "datatype,",Space,Str "using",Space,Str "symbolic",Space,Str "names:"],CodeBlock ("",["haskell"],[]) "[] a  \8801 []           -- An empty list.\n      | : a ([] a)   -- A list: a value followed by another list.",Header 2 ("norm",[],[]) [Str "Normative",Space,Str "Definitions"],Para [Str "\27491\21517",Space,Str "specifies:"],BulletList [[Para [Str "a",Space,Str "set",Space,Str "of",Space,Str "valid",Space,Str "algebraic",Space,Str "data",Space,Str "types",Space,Str "definitions",Space,Str "(ADTs)"]],[Para [Str "a",Space,Str "set",Space,Str "of",Space,Str "valid",Space,Str "types"]],[Para [Str "unique",Space,Str "identifiers",Space,Str "for",Space,Str "every",Space,Str "valid",Space,Str "ADT"]],[Para [Str "the",Space,Str "binary",Space,Str "serialisation",Space,Str "of",Space,Str "the",Space,Str "values",Space,Str "of",Space,Str "every",Space,Str "valid",Space,Str "type"]]],Header 3 ("basic-concepts",[],[]) [Str "Basic",Space,Str "Concepts"],DefinitionList [([Str "Algebraic",Space,Str "Data",Space,Str "Type",Space,Str "(ADT)"],[[Plain [Str "A",Space,Str "data",Space,Str "type",Space,Str "constructor",Space,Str "with",Space,Str "zero",Space,Str "or",Space,Str "more",Space,Str "type",Space,Str "parameters",Space,Str "plus",Space,Str "zero",Space,Str "or",Space,Str "more",Space,Str "constructors."]]]),([Str "Type"],[[Plain [Str "The",Space,Str "application",Space,Str "of",Space,Str "a",Space,Str "data",Space,Str "type",Space,Str "constructor",Space,Str "to",Space,Str "the",Space,Str "number",Space,Str "of",Space,Str "type",Space,Str "parameters",Space,Str "specified",Space,Str "in",Space,Str "its",Space,Str "data",Space,Str "type",Space,Str "definition."]]]),([Str "Value"],[[Plain [Str "The",Space,Str "application",Space,Str "of",Space,Str "a",Space,Str "constructor",Space,Str "to",Space,Str "the",Space,Str "number",Space,Str "of",Space,Str "parameters",Space,Str "specified",Space,Str "in",Space,Str "its",Space,Str "data",Space,Str "type",Space,Str "definition."]]])],Para [Str "For",Space,Str "example,",Space,Str "the",Space,Str "ADT:"],CodeBlock ("",["haskell"],[]) "Maybe a \8801 Nothing\n        | Just a",Para [Str "defines:"],BulletList [[Plain [Str "a",Space,Str "data",Space,Str "type",Space,Str "constructor",Space,Code ("",[],[]) "Maybe",Space,Str "that",Space,Str "takes",Space,Str "one",Space,Str "type",Space,Str "parameter"]],[Plain [Str "two",Space,Str "constructors",Space,Code ("",[],[]) "Nothing",Space,Str "and",Space,Code ("",[],[]) "Just",Space,Str "that",Space,Str "take",Space,Str "zero",Space,Str "and",Space,Str "one",Space,Str "parameter",Space,Str "respectively"]]],Para [Str "Given",Space,Str "these",Space,Str "additional",Space,Str "definitions:"],CodeBlock ("",["haskell"],[]) "Bool \8801 False\n     | True\n\nVoid",Para [Str "A",Space,Str "type",Space,Str "is",Space,Str "constructed",Space,Str "by",Space,Str "applying",Space,Code ("",[],[]) "Maybe",Space,Str "to",Space,Str "exactly",Space,Str "one",Space,Str "type",Space,Str "parameter:",Space,Code ("",[],[]) "Maybe Bool",Str ",",Space,Code ("",[],[]) "Maybe (Maybe Bool)",Space,Str "and",Space,Str "so",Space,Str "on."],Para [Str "A",Space,Str "value",Space,Str "is",Space,Str "constructed",Space,Str "by",Space,Str "applying",Space,Code ("",[],[]) "Nothing",Space,Str "and",Space,Code ("",[],[]) "Just",Space,Str "to",Space,Str "their",Space,Str "specified",Space,Str "number",Space,Str "of",Space,Str "parameters."],Para [Str "The",Space,Str "values",Space,Str "of",Space,Str "type",Space,Code ("",[],[]) "Maybe Bool",Space,Str "are:",Space,Code ("",[],[]) "Nothing, Just False, Just True",Str "."],Para [Str "The",Space,Str "only",Space,Str "value",Space,Str "of",Space,Str "type",Space,Code ("",[],[]) "Maybe Void",Space,Str "is",Space,Code ("",[],[]) "Nothing",Str "."],Header 3 ("formal-definitions",[],[]) [Str "Formal",Space,Str "Definitions"],Para [Str "\27491\21517",Space,Str "formally",Space,Str "specifies",Space,Str "its",Space,Str "concepts",Space,Str "in",Space,Str "three",Space,Str "ways:"],BulletList [[Para [Str "syntactically,",Space,Str "by",Space,Str "the",Space,Str "syntactical",Space,Str "definitions",Space,Str "that",Space,Str "compose",Space,Str "the",Space,Str "canonical",Space,Str "model"]],[Para [Str "semantically,",Space,Str "by",Space,Str "the",Space,Str "names",Space,Str "of",Space,Str "the",Space,Str "ADTs",Space,Str "that",Space,Str "indicate",Space,Str "(hopefully",Space,Str "in",Space,Str "a",Space,Str "self-explaining",Space,Str "way)",Space,Str "how",Space,Str "their",Space,Str "values",Space,Str "should",Space,Str "be",Space,Str "interpreted,",Space,Str "in",Space,Str "particular:"]]],Table [Str "Semantic",Space,Str "Constrains."] [AlignLeft,AlignLeft] [0.35365853658536583,0.6463414634146342] [[Plain [Str "Type"]],[Plain [Str "Meaning"]]] [[[Plain [Str "Char"]],[Plain [Str "A",Space,Str "Unicode",Space,Str "character"]]],[[Plain [Str "LeastSignificantFirst",Space,Str "a"]],[Plain [Str "The",Space,Str "parts",Space,Str "that",Space,Str "compose",Space,Str "value",Space,Code ("",[],[]) "a",Space,Str "are",Space,Str "ordered",Space,Str "with",Space,Str "the",Space,Str "least",Space,Str "significant",Space,Str "(arithmetically)",Space,Str "part",Space,Str "first"]]],[[Plain [Str "MostSignificantFirst",Space,Str "a"]],[Plain [Str "The",Space,Str "parts",Space,Str "that",Space,Str "compose",Space,Str "value",Space,Code ("",[],[]) "a",Space,Str "are",Space,Str "ordered",Space,Str "with",Space,Str "the",Space,Str "most",Space,Str "significant",Space,Str "(arithmetically)",Space,Str "part",Space,Str "first"]]],[[Plain [Str "SHAKE128_48"]],[Plain [Str "The",Space,Str "first",Space,Str "48",Space,Str "bits",Space,Str "of",Space,Str "a",Space,Str "SHAKE128",Space,Str "hash"]]],[[Plain [Str "UnicodeLetter"]],[Plain [Str "A",Space,Str "Unicode",Space,Str "character",Space,Str "whose",Space,Link ("",[],[]) [Str "General",Space,Str "Category"] ("https://en.wikipedia.org/wiki/Unicode_character_property#General_Category",""),Space,Str "is",Space,Code ("",[],[]) "Letter"]]],[[Plain [Str "UnicodeLetterOrNumberOrLine"]],[Plain [Str "A",Space,Str "Unicode",Space,Str "character",Space,Str "that",Space,Str "is",Space,Str "either",Space,Str "the",Space,Code ("",[],[]) "_",Space,Str "(underscore)",Space,Str "character",Space,Str "or",Space,Str "whose",Space,Link ("",[],[]) [Str "General",Space,Str "Category"] ("https://en.wikipedia.org/wiki/Unicode_character_property#General_Category",""),Space,Str "is",Space,Code ("",[],[]) "Letter",Space,Str "or",Space,Code ("",[],[]) "Number"]]],[[Plain [Str "UnicodeNumber"]],[Plain [Str "A",Space,Str "Unicode",Space,Str "character",Space,Str "whose",Space,Link ("",[],[]) [Str "General",Space,Str "Category"] ("https://en.wikipedia.org/wiki/Unicode_character_property#General_Category",""),Space,Str "is",Space,Code ("",[],[]) "Number"]]],[[Plain [Str "UnicodeSymbol"]],[Plain [Str "A",Space,Str "Unicode",Space,Str "character",Space,Str "whose",Space,Link ("",[],[]) [Str "General",Space,Str "Category"] ("https://en.wikipedia.org/wiki/Unicode_character_property#General_Category",""),Space,Str "is",Space,Code ("",[],[]) "Symbol"]]]],BulletList [[Para [Str "by",Space,Str "convention,",Space,Str "by",Space,Str "stating",Space,Str "the",Space,Str "following",Space,Str "additional",Space,Str "constrains:"],BulletList [[Plain [Str "the",Space,Str "constructor",Space,Str "names",Space,Str "in",Space,Str "an",Space,Str "algebraic",Space,Str "data",Space,Str "type",Space,Str "must",Space,Str "be",Space,Str "all",Space,Str "distinct"]],[Plain [Str "types",Space,Str "passed",Space,Str "as",Space,Str "parameters",Space,Str "to",Space,Str "a",Space,Str "data",Space,Str "type",Space,Str "constructor",Space,Str "must",Space,Str "be",Space,Str "valid,",Space,Str "that's",Space,Str "to",Space,Str "say",Space,Str "applied",Space,Str "to",Space,Str "the",Space,Str "correct",Space,Str "number",Space,Str "of",Space,Str "valid",Space,Str "type",Space,Str "parameters"]]]]],Header 3 ("algebraic-data-types",[],[]) [Str "Algebraic",Space,Str "Data",Space,Str "Types"],Para [Str "ADTs",Space,Str "are",Space,Str "represented",Space,Str "by",Space,Str "values",Space,Str "of",Space,Str "type:",Space,Code ("",[],[]) "ADT Identifier Identifier (ADTRef AbsRef)",Space,Str "."],Para [Str "Valid",Space,Str "ADTs",Space,Str "must",Space,Str "satisfy",Space,Str "all",Space,Str "the",Space,Str "syntactical,",Space,Str "semantic",Space,Str "and",Space,Str "conventional",Space,Str "constrains",Space,Str "previously",Space,Str "stated."],Para [Str "\27491\21517",Space,Str "has",Space,Str "no",Space,Str "primitive",Space,Str "types,",Space,Str "all",Space,Str "types",Space,Str "are",Space,Str "defined",Space,Str "explicitly."],Header 3 ("types",[],[]) [Str "Types"],Para [Str "Types",Space,Str "are",Space,Str "represented",Space,Str "by",Space,Str "values",Space,Str "of",Space,Str "type:\160",Str "Type",Space,Str "AbsRef",Str "."],Para [Str "For",Space,Str "example,",Space,Str "the",Space,Str "type",Space,Code ("",[],[]) "Maybe Char",Space,Str "is",Space,Str "represented",Space,Str "as:"],Para [Str "TypeApp"],Para [Str "(TypeCon",Space,Str "(AbsRef",Space,Str "(SHAKE128_48",Space,Str "218",Space,Str "104",Space,Str "54",Space,Str "119",Space,Str "143",Space,Str "212)))"],Para [Str "(TypeCon",Space,Str "(AbsRef",Space,Str "(SHAKE128_48",Space,Str "6",Space,Str "109",Space,Str "181",Space,Str "42",Space,Str "241",Space,Str "69)))"],Header 3 ("unique-identifiers",[],[]) [Str "Unique",Space,Str "Identifiers"],Para [Str "\27491\21517",Space,Str "defines",Space,Str "(practically)",Space,Str "unique",Space,Str "identifier",Space,Str "for",Space,Str "ADTs",Space,Str "and",Space,Str "consequently",Space,Str "for",Space,Str "types."],Para [Str "Valid",Space,Str "ADT's",Space,Str "identifiers",Space,Str "are",Space,Str "values",Space,Str "of",Space,Str "type:\160",Str "AbsRef",Str "."],Para [Str "The",Space,Str "identifier",Space,Str "consists",Space,Str "in",Space,Str "the",Space,Str "SHAKE128(M,",Space,Str "48)",Space,Str "(6",Space,Str "bytes",Space,Str "long)",Space,Str "hash",Space,Str "of",Space,Str "the",Space,Str "shortest",Space,Str "byte-aligned",Space,Link ("",[],[]) [Str "Flat"] ("http://quid2.org/docs/Flat.pdf",""),Space,Str "encoding",Space,Str "of",Space,Str "the",Space,Str "value",Space,Str "of",Space,Str "type",Space,Code ("",[],[]) "PostAligned (ADT Identifier Identifier (ADTRef AbsRef))",Space,Str "where",Space,Str "the",Space,Str "value",Space,Str "of",Space,Str "type",Space,Code ("",[],[]) "ADT Identifier Identifier (ADTRef AbsRef)",Space,Str "corresponds",Space,Str "to",Space,Str "the",Space,Str "ADT."],Para [Str "For",Space,Str "display",Space,Str "purposes,",Space,Str "the",Space,Str "identifier",Space,Str "can",Space,Str "be",Space,Str "compactly",Space,Str "represented",Space,Str "as",Space,Str "the",Space,Str "letter",Space,Str "'K'",Space,Str "followed",Space,Str "by",Space,Str "the",Space,Str "hexadecimal",Space,Str "representation",Space,Str "of",Space,Str "the",Space,Str "hash."],Para [Str "For",Space,Str "example,",Space,Str "the",Space,Str "identifier",Space,Str "for",Space,Str "the",Space,Str "ADT:"],CodeBlock ("",["haskell"],[]) "Maybe a \8801 Nothing\n        | Just a",Para [Str "is\160",Str "AbsRef",Space,Str "(SHAKE128_48",Space,Str "218",Space,Str "104",Space,Str "54",Space,Str "119",Space,Str "143",Space,Str "212)",Str "."],Para [Str "This",Space,Str "can",Space,Str "also",Space,Str "be",Space,Str "compactly",Space,Str "represented",Space,Str "as",Space,Code ("",[],[]) "Kda6836778fd4",Space,Str "."],Header 3 ("serialisation-of-values",[],[]) [Str "Serialisation",Space,Str "of",Space,Str "Values"],Para [Str "Value",Space,Str "are",Space,Str "serialised",Space,Str "according",Space,Str "to",Space,Str "the",Space,Str "mapping",Space,Str "of",Space,Str "ADTs",Space,Str "to",Space,Link ("",[],[]) [Str "Flat"] ("http://quid2.org/docs/Flat.pdf",""),Space,Str "data",Space,Str "graphs",Space,Str "specified",Space,Str "in",Space,Str "the",Space,Link ("",[],[]) [Str "Flat"] ("http://quid2.org/docs/Flat.pdf",""),Space,Str "specification."],Para [Str "For",Space,Str "example,",Space,Str "given",Space,Str "the",Space,Str "definitions:"],CodeBlock ("",["haskell"],[]) "List a \8801 Nil\n       | Cons a (List a)\n\nBool \8801 False | True",Para [Str "The",Space,Str "type",Space,Code ("",[],[]) "List Bool",Space,Str "is",Space,Str "mapped",Space,Str "to",Space,Str "the",Space,Str "Flat",Space,Str "data",Space,Str "flow",Space,Str "graph:"],Para [Image ("",[],[("height","40mm")]) [Str "List",Space,Str "of",Space,Str "Booleans"] ("flat/img-list-bool-bits.pdf","fig:")],Para [Str "So",Space,Str "that,",Space,Str "for",Space,Str "example,",Space,Str "the",Space,Str "value",Space,Code ("",[],[]) "Cons True (Cons False Nil)",Space,Str "would",Space,Str "be",Space,Str "serialised",Space,Str "as",Space,Str "the",Space,Str "binary",Space,Str "sequence",Space,Code ("",[],[]) "11100",Str "."],Header 3 ("canonical-data-model",[],[]) [Str "Canonical",Space,Str "Data",Space,Str "Model"],Para [Str "The",Space,Str "canonical",Space,Str "model",Space,Str "is",Space,Str "also",Space,Str "a",Space,Str "meta-model,",Space,Str "the",Space,Str "model",Space,Str "can",Space,Str "be",Space,Str "expressed",Space,Str "in",Space,Str "the",Space,Str "model",Space,Str "itself."],Para [Str "The",Space,Str "complete",Space,Str "definition",Space,Str "of",Space,Str "the",Space,Str "canonical",Space,Str "model",Space,Str "is",Space,Str "(every",Space,Str "ADT",Space,Str "is",Space,Str "preceded",Space,Str "by",Space,Str "its",Space,Str "unique",Space,Str "identifier",Space,Str "in",Space,Str "compact",Space,Str "format):"],CodeBlock ("",[],[]) "K3e8257255cbf:\n ADT a b c \8801 ADT {declName :: a,\n                  declNumParameters :: Word8,\n                  declCons :: Maybe (ConTree b c)}\n\nK07b1b045ac3c:\n ADTRef a \8801   Var Word8\n            | Rec\n            | Ext a\n\nK4bbd38587b9e:\n AbsRef \8801 AbsRef (SHAKE128_48 (ADT Identifier\n                                   Identifier\n                                   (ADTRef AbsRef)))\n\nK066db52af145:\n Char \8801 Char Word32\n\nK86653e040025:\n ConTree a b \8801   Con {constrName :: a,\n                      constrFields :: Either (List (Type b)) (List (Tuple2 a (Type b)))}\n               | ConTree (ConTree a b) (ConTree a b)\n\nK6260e465ae74:\n Either a b \8801   Left a\n              | Right b\n\nKae1dfeece189:\n Filler \8801   FillerBit Filler\n          | FillerEnd\n\nKdc26e9d90047:\n Identifier \8801   Name UnicodeLetter\n                     (List UnicodeLetterOrNumberOrLine)\n              | Symbol (NonEmptyList UnicodeSymbol)\n\nK20ffacc8f8c9:\n LeastSignificantFirst a \8801 LeastSignificantFirst a\n\nKb8cd13187198:\n List a \8801   Nil\n          | Cons a (List a)\n\nKda6836778fd4:\n Maybe a \8801   Nothing\n           | Just a\n\nK74e2b3b89941:\n MostSignificantFirst a \8801 MostSignificantFirst a\n\nKbf2d1c86eb20:\n NonEmptyList a \8801   Elem a\n                  | Cons a (NonEmptyList a)\n\nKab225802768e:\n PostAligned a \8801 PostAligned {postValue :: a, postFiller :: Filler}\n\nK9f214799149b:\n SHAKE128_48 a \8801 SHAKE128_48 Word8 Word8 Word8 Word8 Word8 Word8\n\nKa5583bf3ad34:\n Tuple2 a b \8801 Tuple2 a b\n\nK7028aa556ebc:\n Type a \8801   TypeCon a\n          | TypeApp (Type a) (Type a)\n\nK3878b3580fc5:\n UnicodeLetter \8801 UnicodeLetter Char\n\nK33445520c45a:\n UnicodeLetterOrNumberOrLine \8801 UnicodeLetterOrNumberOrLine Char\n\nK801030ef543c:\n UnicodeSymbol \8801 UnicodeSymbol Char\n\nKf92e8339908a:\n Word \8801 Word (LeastSignificantFirst (NonEmptyList (MostSignificantFirst Word7)))\n\nK2412799c99f1:\n Word32 \8801 Word32 Word\n\nKf4c946334a7e:\n Word7 \8801   V0\n         | V1\n         | V2\n         | V3\n         | V4\n...\n         | V123\n         | V124\n         | V125\n         | V126\n         | V127\n\n\nKb1f46a49c8f8:\n Word8 \8801   V0\n         | V1\n         | V2\n         | V3\n         | V4\n...\n         | V251\n         | V252\n         | V253\n         | V254\n         | V255\n",Header 2 ("about-this-document",[],[]) [Str "About",Space,Str "This",Space,Str "Document"],Para [Str "The",Space,Str "normative",Space,Str "part",Space,Str "of",Space,Str "this",Space,Str "spec",Space,Str "is",Space,Link ("",[],[]) [Str "Normative",Space,Str "Definitions"] ("#norm",""),Str ",",Space,Str "the",Space,Str "rest",Space,Str "is",Space,Str "explanatory",Space,Str "narrative."],Table [Str "Document",Space,Str "Metadata."] [AlignLeft,AlignLeft] [0.0,0.0] [[],[]] [[[Plain [Str "Status"]],[Plain [Str "Draft"]]],[[Plain [Str "Reference",Space,Str "URL"]],[Plain [Str "http://quid2.org/docs/ZhengMing.pdf"]]],[[Plain [Str "License"]],[Plain [Link ("",[],[]) [Str "GPLv3"] ("http://www.gnu.org/licenses/gpl-3.0.en.html","")]]],[[Plain [Str "First",Space,Str "Published"]],[Plain [Str "2017-05-01"]]],[[Plain [Str "Last",Space,Str "Revision"]],[Plain [Str "2017-05-01"]]],[[Plain [Str "Copyright",Space,Str "\169"]],[Plain [Str "Pasqualino",Space,Str "\"Titto\"",Space,Str "Assini",Space,Str "(tittoassini@gmail.com)"]]]]]