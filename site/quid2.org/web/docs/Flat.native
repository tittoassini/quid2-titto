Pandoc (Meta {unMeta = fromList [("author",MetaList [MetaInlines [Str "Pasqualino",Space,Str "`Titto'",Space,Str "Assini",Space,Str "(tittoassini@gmail.com)"]]),("date",MetaInlines [Str "27",Superscript [Str "th"],Space,Str "of",Space,Str "May",Space,Str "2016"]),("title",MetaInlines [Str "Flat",Space,Str "(Draft)"])]}) [Header 2 ("what-is-flat",[],[]) [Str "What",Space,Str "is",Space,Str "Flat?"],Para [Str "Flat",Space,Str "is",Space,Str "a",Space,Str "minimalist,",Space,Str "principled",Space,Str "and",Space,Str "efficient",Space,Str "binary",Space,Str "data",Space,Str "format",Space,Str "suitable",Space,Str "for",Space,Str "data",Space,Str "exchange",Space,Str "and",Space,Str "storage."],Header 2 ("design-goals",[],[]) [Str "Design",Space,Str "Goals"],Para [Str "The",Space,Str "goal",Space,Str "of",Space,Str "a",Space,Str "universal",Space,Str "data",Space,Str "format",Space,Str "is",Space,Str "to",Space,Str "operate",Space,Str "as",Space,Str "a",Space,Str "bridge",Space,Str "across:"],BulletList [[Para [Str "different",Space,Str "ways",Space,Str "of",Space,Str "modelling",Space,Str "data",Space,Str "(databases,",Space,Str "object",Space,Str "oriented,",Space,Str "functional",Space,Str "or",Space,Str "imperative",Space,Str "languages)"]],[Para [Str "processing",Space,Str "systems",Space,Str "(ranging",Space,Str "from",Space,Str "nanosystems",Space,Str "to",Space,Str "mainframes)"]],[Para [Str "time",Space,Str "(long",Space,Str "term",Space,Str "storage",Space,Str "and",Space,Str "retrieval",Space,Str "of",Space,Str "data)"]]],Para [Str "To",Space,Str "be",Space,Str "able",Space,Str "to",Space,Str "cross",Space,Str "these",Space,Str "barriers,",Space,Str "it",Space,Str "has",Space,Str "to",Space,Str "be",Space,Str "based",Space,Str "on",Space,Str "the",Space,Str "simplest",Space,Str "possible",Space,Str "abstractions",Space,Str "and",Space,Str "free",Space,Str "from",Space,Str "arbitrary",Space,Str "and",Space,Str "limiting",Space,Str "decisions",Space,Str "about",Space,Str "predefined",Space,Str "data",Space,Str "structures",Space,Str "or",Space,Str "primitive",Space,Str "types."],Para [Str "Briefly",Space,Str "stated,",Space,Str "it",Space,Str "has",Space,Str "to",Space,Str "be",Space,Str "discovered,",Space,Str "not",Space,Str "invented."],Header 2 ("design-non-goals",[],[]) [Str "Design",Space,Str "Non-Goals"],Para [Str "Some",Space,Str "data",Space,Str "formats",Space,Str "embed",Space,Str "semantic",Space,Str "information",Space,Str "(for",Space,Str "example",Space,Link ("",[],[]) [Str "JSON"] ("http://www.json.org/",""),Space,Str "states",Space,Str "the",Space,Str "names",Space,Str "of",Space,Str "the",Space,Str "data",Space,Str "type",Space,Str "and",Space,Str "of",Space,Str "the",Space,Str "fields",Space,Str "being",Space,Str "represented",Space,Str "in",Space,Str "every",Space,Str "value,",Space,Link ("",[],[]) [Str "CBOR"] ("http://cbor.io/",""),Space,Str "has",Space,Str "type",Space,Str "tags)",Space,Str "or",Space,Str "provide",Space,Str "non",Space,Str "essential",Space,Str "features",Space,Str "such",Space,Str "as",Space,Str "a",Space,Str "versioning,",Space,Str "redundancy,",Space,Str "error-correction",Space,Str "or",Space,Str "compression."],Para [Str "The",Space,Str "principled",Space,Str "approach",Space,Str "taken",Space,Str "by",Space,Str "Flat",Space,Str "is",Space,Str "that",Space,Str "all",Space,Str "these",Space,Str "additional",Space,Str "features",Space,Str "can",Space,Str "be",Space,Str "provided",Space,Str "much",Space,Str "more",Space,Str "cleanly,",Space,Str "flexibly",Space,Str "and",Space,Str "effectively",Space,Str "by",Space,Str "additional",Space,Str "conventions",Space,Str "layered",Space,Str "on",Space,Str "top",Space,Str "of",Space,Str "the",Space,Str "binary",Space,Str "data",Space,Str "format."],Header 2 ("a-principled-data-model",[],[]) [Str "A",Space,Str "Principled",Space,Str "Data",Space,Str "Model"],Para [Str "There",Space,Str "are",Space,Str "two",Space,Str "concepts",Space,Str "that",Space,Str "necessary",Space,Str "underlay",Space,Str "any",Space,Str "conceivable",Space,Str "data",Space,Str "modelling",Space,Str "formalism:"],BulletList [[Para [Str "Choice:",Space,Str "information,",Space,Str "in",Space,Str "its",Space,Str "simplest",Space,Str "form,",Space,Str "is",Space,Str "a",Space,Str "choice",Space,Str "among",Space,Str "different",Space,Str "alternatives;",Space,Str "the",Space,Str "basic",Space,Str "unit",Space,Str "of",Space,Str "information,",Space,Str "the",Space,Str "bit,",Space,Str "corresponds",Space,Str "to",Space,Str "the",Space,Str "simplest",Space,Str "possible",Space,Str "choice,",Space,Str "that",Space,Str "between",Space,Str "two",Space,Str "different",Space,Str "values."]],[Para [Str "Sequencing",Space,Str "or",Space,Str "Aggregation:",Space,Str "complex",Space,Str "data",Space,Str "types",Space,Str "are",Space,Str "built",Space,Str "aggregating",Space,Str "simpler",Space,Str "data",Space,Str "types."]]],Para [Str "From",Space,Str "these",Space,Str "two",Space,Str "principles",Space,Str "we",Space,Str "can",Space,Str "directly",Space,Str "derive",Space,Str "a",Space,Str "simple",Space,Str "but",Space,Str "expressive",Space,Str "data",Space,Str "modelling",Space,Str "framework."],Para [Str "Our",Space,Str "starting",Space,Str "point",Space,Str "is",Space,Str "the",Space,Str "binary",Space,Str "choice",Space,Str "operator",Space,Code ("",[],[]) "|",Str "."],Para [Str "Using",Space,Str "it,",Space,Str "a",Space,Str "bit",Space,Str "can",Space,Str "be",Space,Str "defined",Space,Str "as",Space,Str "(Figure",Space,Str "1):"],Para [Code ("",[],[]) "Bit \8801 Zero | One"],Para [Str "Meaning:",Space,Str "\"the",Space,Str "data",Space,Str "type",Space,Str "Bit",Space,Str "is",Space,Str "defined",Space,Str "(\8801)",Space,Str "as",Space,Str "either",Space,Str "(|)",Space,Str "a",Space,Str "Zero",Space,Str "or",Space,Str "a",Space,Str "One.\""],Para [Image ("",[],[("height","40mm")]) [Str "Bit"] ("flat/bit.pdf","fig:")],Para [Str "The",Space,Str "binary",Space,Str "choice",Space,Str "operator",Space,Str "|",Space,Str "corresponds",Space,Str "to",Space,Str "a",Space,Str "minimal",Space,Str "binary",Space,Str "tree."],Para [Str "Trees",Space,Str "with",Space,Str "more",Space,Str "than",Space,Str "one",Space,Str "node",Space,Str "can",Space,Str "be",Space,Str "used",Space,Str "to",Space,Str "represent",Space,Str "choice",Space,Str "across",Space,Str "any",Space,Str "number",Space,Str "of",Space,Str "values."],Para [Str "For",Space,Str "the",Space,Str "tree",Space,Str "to",Space,Str "be",Space,Str "as",Space,Str "compact",Space,Str "as",Space,Str "possible,",Space,Str "we",Space,Str "want",Space,Str "it",Space,Str "to",Space,Str "be",Space,Str "balanced."],Para [Str "The",Space,Str "only",Space,Str "arbitrary",Space,Str "choice",Space,Str "is",Space,Str "if,",Space,Str "in",Space,Str "case",Space,Str "of",Space,Str "an",Space,Str "odd",Space,Str "number",Space,Str "of",Space,Str "choices,",Space,Str "the",Space,Str "tree",Space,Str "should",Space,Str "be",Space,Str "left",Space,Str "or",Space,Str "right-size",Space,Str "heavier."],Para [Str "If",Space,Str "we",Space,Str "opt",Space,Str "for",Space,Str "the",Space,Str "second",Space,Str "alternative",Space,Note [Para [Str "This",Space,Str "choice",Space,Str "is",Space,Str "arbitrary,",Space,Str "but",Space,Str "inconsequential,",Space,Str "as",Space,Str "the",Space,Str "two",Space,Str "options",Space,Str "are",Space,Str "completely",Space,Str "equivalent."]],Str ",",Space,Str "the",Space,Str "traditional",Space,Str "five",Space,Str "Chinese",Space,Str "directions",Space,Str "can",Space,Str "be",Space,Str "represented",Space,Str "as",Space,Str "(Figure",Space,Str "2):"],Para [Code ("",[],[]) "Direction \8801 (North | South) | (Center | (East | West))"],Para [Image ("",[],[("height","50mm")]) [Str "Direction"] ("flat/directions.pdf","fig:")],Para [Str "Note",Space,Str "how",Space,Str "the",Space,Str "5",Space,Str "values",Space,Str "of",Space,Code ("",[],[]) "Direction",Space,Str "are",Space,Str "split",Space,Str "in",Space,Str "groups",Space,Str "of",Space,Str "2",Space,Str "and",Space,Str "3",Space,Str "(balanced",Space,Str "and",Space,Str "right-heavy)",Space,Str "and",Space,Str "the",Space,Str "right",Space,Str "group",Space,Str "of",Space,Str "3",Space,Str "constructors",Space,Str "is",Space,Str "split",Space,Str "in",Space,Str "groups",Space,Str "of",Space,Str "1",Space,Str "and",Space,Str "2",Space,Str "(again",Space,Str "balanced",Space,Str "and",Space,Str "right-heavy)."],Para [Str "Simple",Space,Str "types",Space,Str "that",Space,Str "are",Space,Str "usually",Space,Str "introduced",Space,Str "as",Space,Str "primitives,",Space,Str "such",Space,Str "as",Space,Str "the",Space,Str "unsigned",Space,Str "short",Space,Str "integer,",Space,Str "can",Space,Str "be",Space,Str "explicitly",Space,Str "defined",Space,Str "by",Space,Str "stating",Space,Str "their",Space,Str "possible",Space,Str "values:"],Para [Code ("",[],[]) "Word8 = (..((Z | N1) | (N2 | N3)) .. | .. ((N252 | N253) | (N254 | N255))..)"],Para [Str "So",Space,Str "far",Space,Str "values",Space,Str "have",Space,Str "consisted",Space,Str "in",Space,Str "unique",Space,Str "labels",Space,Str "(Zero,",Space,Str "One,",Space,Str "N255..).",Space,Str "To",Space,Str "create",Space,Str "more",Space,Str "complex",Space,Str "data",Space,Str "types,",Space,Str "we",Space,Str "allow",Space,Str "the",Space,Str "label",Space,Str "(or",Space,Str "constructor)",Space,Str "to",Space,Str "be",Space,Str "followed",Space,Str "by",Space,Str "a",Space,Str "(possibly",Space,Str "empty)",Space,Str "sequence",Space,Str "of",Space,Str "values."],Para [Str "As",Space,Str "an",Space,Str "example",Space,Str "consider",Space,Str "a",Space,Str "data",Space,Str "type",Space,Str "that",Space,Str "conveys",Space,Str "the",Space,Str "concept",Space,Str "of",Space,Str "an",Space,Str "optional",Space,Str "Bit:"],CodeBlock ("",[],[]) "-- An Optional Bit is either empty (None) or carries a value (Some Bit):\nOptional Bit \8801 None | Some Bit",Para [Str "The",Space,Str "constructor's",Space,Str "fields",Space,Str "can",Space,Str "also",Space,Str "be",Space,Str "of",Space,Str "the",Space,Str "same",Space,Str "type",Space,Str "of",Space,Str "the",Space,Str "data",Space,Str "type",Space,Str "being",Space,Str "defined,",Space,Str "enabling",Space,Str "the",Space,Str "definition",Space,Str "of",Space,Str "recursive",Space,Str "data",Space,Str "types,",Space,Str "such",Space,Str "as",Space,Str "a",Space,Str "list",Space,Str "of",Space,Str "booleans",Space,Str "(Figure",Space,Str "3):"],CodeBlock ("",[],[]) "-- A List Bool is either a 0-length list (Nil)\n-- or a Cons value with two fields, the first pointing to a Bool\n-- and the second recursively to the List Bool itself.\nList Bool \8801 Nil | Cons Bool (List Bool)\n\n-- A boolean is either False or True.\nBool \8801 False | True`",Para [Image ("",[],[("height","45mm")]) [Str "List",Space,Str "of",Space,Str "Booleans"] ("flat/img-list-bool.pdf","fig:")],Para [Str "Mutually",Space,Str "recursive",Space,Str "definitions",Space,Str "are",Space,Str "also",Space,Str "possible",Space,Str "(Figure",Space,Str "4):"],CodeBlock ("",[],[]) "-- A Forest is a list of Trees\nForest Bool \8801 Nil | Cons (Tree Bool) (Forest Bool)\n\n-- A Tree is either empty or is a Bool followed by a Forest Bool\nTree Bool \8801 Empty | Node Bool (Forest Bool)",Para [Image ("",[],[("height","65mm")]) [Str "Forest",Space,Str "and",Space,Str "Tree",Space,Str "of",Space,Str "Booleans"] ("flat/tree-bool.pdf","fig:")],Para [Str "As",Space,Str "well",Space,Str "as",Space,Str "definitionally",Space,Str "infinite",Space,Str "data",Space,Str "types",Space,Str "(Figure",Space,Str "5):"],Para [Code ("",[],[]) "Stream Bool \8801 Stream Bool (Stream Bool)"],Para [Image ("",[],[("height","40mm")]) [Str "Stream",Space,Str "of",Space,Str "Booleans"] ("flat/img-stream-bool.pdf","fig:")],Para [Str "The",Space,Str "building",Space,Str "of",Space,Str "compound",Space,Str "values",Space,Str "from",Space,Str "simpler",Space,Str "ones",Space,Str "can",Space,Str "be",Space,Str "seen",Space,Str "as",Space,Str "the",Space,Str "application",Space,Str "of",Space,Str "a",Space,Str "binary",Space,Str "sequencing",Space,Str "or",Space,Str "coupling",Space,Str "operator",Space,Code ("",[],[]) "(,)",Str "."],Para [Str "For",Space,Str "example,",Space,Str "the",Space,Str "value",Space,Code ("",[],[]) "Cons Bool (List Bool)",Space,Str "is",Space,Str "equivalent",Space,Str "to",Space,Str "the",Space,Str "labelled",Space,Str "binary",Space,Str "tuple",Space,Code ("",[],[]) "Cons (Bool,List Bool)",Str "."],Para [Str "Values",Space,Str "with",Space,Str "any",Space,Str "number",Space,Str "of",Space,Str "fields",Space,Str "can",Space,Str "be",Space,Str "built",Space,Str "by",Space,Str "nesting",Space,Str "up",Space,Str "binary",Space,Str "tuples",Space,Str "as",Space,Str "in",Space,Code ("",[],[]) "(A,(B,(C,D)))",Str "."],Para [Str "In",Space,Str "conclusion,",Space,Str "using",Space,Str "two",Space,Str "simple",Space,Str "operators,",Space,Str "a",Space,Str "binary",Space,Str "choice",Space,Str "operator",Space,Code ("",[],[]) "|",Space,Str "and",Space,Str "an",Space,Str "(implicit)",Space,Str "sequence",Space,Str "operator",Space,Code ("",[],[]) "(,)",Space,Str "we",Space,Str "have",Space,Str "built",Space,Str "a",Space,Str "powerful",Space,Str "data",Space,Str "modelling",Space,Str "formalism",Space,Str "that",Space,Str "can",Space,Str "be",Space,Str "used",Space,Str "as",Space,Str "a",Space,Str "rosetta",Space,Str "stone",Space,Str "across",Space,Str "any",Space,Str "data",Space,Str "processing",Space,Str "system."],Para [Str "This",Space,Str "formalism",Space,Str "is:"],BulletList [[Para [Str "Principled:",Space,Str "does",Space,Str "not",Space,Str "rely",Space,Str "on",Space,Str "an",Space,Str "arbitrary",Space,Str "selection",Space,Str "of",Space,Str "primitive",Space,Str "types",Space,Str "or",Space,Str "data",Space,Str "structures",Space,Str "selected",Space,Str "according",Space,Str "to",Space,Str "a",Space,Str "designer's",Space,Str "whim."]],[Para [Str "Explicit:",Space,Str "the",Space,Str "structure",Space,Str "of",Space,Str "every",Space,Str "data",Space,Str "type,",Space,Str "from",Space,Str "a",Space,Str "simple",Space,Str "bit",Space,Str "to",Space,Str "the",Space,Str "most",Space,Str "complex",Space,Str "data",Space,Str "model,",Space,Str "can",Space,Str "be",Space,Str "traced",Space,Str "down",Space,Str "to",Space,Str "a",Space,Str "combination",Space,Str "of",Space,Str "choice",Space,Str "and",Space,Str "sequence",Space,Str "operators."]],[Para [Str "Expressive:",Space,Str "it",Space,Str "captures",Space,Str "the",Space,Str "essential",Space,Str "principles",Space,Str "of",Space,Str "data",Space,Str "modelling",Space,Str "and",Space,Str "can",Space,Str "represent",Space,Str "any",Space,Str "kind",Space,Str "of",Space,Str "data",Space,Str "structure",Space,Str "(enumerations,",Space,Str "finite",Space,Str "types,",Space,Str "recursive",Space,Str "and",Space,Str "mutually",Space,Str "recursive",Space,Str "types,",Space,Str "infinite",Space,Str "types)"]]],Para [Str "In",Space,Str "a",Space,Str "more",Space,Str "developed",Space,Str "form,",Space,Str "this",Space,Str "formalism",Space,Str "is",Space,Str "known",Space,Str "as",Space,Str "the",Space,Link ("",[],[]) [Str "algebraic",Space,Str "data",Space,Str "type"] ("https://en.wikipedia.org/wiki/Algebraic_data_type",""),Str ".",Space,Str "Because",Space,Str "of",Space,Str "its",Space,Str "simplicity",Space,Str "and",Space,Str "flexibility,",Space,Str "it",Space,Str "has",Space,Str "been",Space,Str "adapted",Space,Str "natively",Space,Str "by",Space,Str "an",Space,Str "increasing",Space,Str "number",Space,Str "of",Space,Str "programming",Space,Str "languages."],Para [Str "Flat",Space,Str "does",Space,Str "not",Space,Str "requires",Space,Str "the",Space,Str "full",Space,Str "expressive",Space,Str "power",Space,Str "of",Space,Str "algebraic",Space,Str "types.",Space,Str "An",Space,Str "algebraic",Space,Str "data",Space,Str "type",Space,Str "definition",Space,Str "includes",Space,Str "three",Space,Str "aspects:"],BulletList [[Para [Str "syntactical:",Space,Str "the",Space,Str "'shape'",Space,Str "of",Space,Str "a",Space,Str "data",Space,Str "type,",Space,Str "its",Space,Str "basic",Space,Str "structure",Space,Str "as",Space,Str "a",Space,Str "composition",Space,Str "of",Space,Str "|",Space,Str "and",Space,Str "(,)",Space,Str "operators",Space,Str "and",Space,Str "references",Space,Str "to",Space,Str "other",Space,Str "data",Space,Str "types"]],[Para [Str "semantic:",Space,Str "the",Space,Str "'meaning'",Space,Str "of",Space,Str "the",Space,Str "data",Space,Str "type,",Space,Str "suggested",Space,Str "by",Space,Str "the",Space,Str "names",Space,Str "of",Space,Str "the",Space,Str "data",Space,Str "type",Space,Str "and",Space,Str "its",Space,Str "constructors"]],[Para [Str "type-theoretic:",Space,Str "in",Space,Str "a",Space,Str "programming",Space,Str "language,",Space,Str "data",Space,Str "types",Space,Str "are",Space,Str "defined",Space,Str "in",Space,Str "the",Space,Str "context",Space,Str "of",Space,Str "a",Space,Str "type",Space,Str "system",Space,Str "that",Space,Str "can",Space,Str "impose",Space,Str "constrains",Space,Str "on",Space,Str "the",Space,Str "set",Space,Str "of",Space,Str "acceptable",Space,Str "values",Space,Str "and",Space,Str "use",Space,Str "parametricity",Space,Str "and",Space,Str "other",Space,Str "mechanisms",Space,Str "to",Space,Str "make",Space,Str "definitions",Space,Str "generic",Space,Str "and",Space,Str "composable."]]],Para [Str "Flat",Space,Str "only",Space,Str "captures",Space,Str "the",Space,Str "syntax",Space,Str "of",Space,Str "a",Space,Str "data",Space,Str "type,",Space,Str "anything",Space,Str "else",Space,Str "is",Space,Str "the",Space,Str "job",Space,Str "of",Space,Str "higher",Space,Str "level",Space,Str "layers."],Para [Str "It",Space,Str "is",Space,Str "straightforward",Space,Str "to",Space,Str "derive",Space,Str "the",Space,Str "canonical",Space,Str "syntactical",Space,Str "structure",Space,Str "of",Space,Str "a",Space,Str "data",Space,Str "type:"],BulletList [[Para [Str "the",Space,Str "data",Space,Str "type",Space,Str "name",Space,Str "is",Space,Str "ignored"]],[Para [Str "The",Space,Str "left",Space,Str "and",Space,Str "right",Space,Str "branches",Space,Str "of",Space,Str "the",Space,Str "choice",Space,Str "|",Space,Str "operator",Space,Str "are",Space,Str "respectively",Space,Str "marked",Space,Str "with",Space,Str "0",Space,Str "and",Space,Str "1."]],[Para [Str "the",Space,Str "constructors'",Space,Str "names",Space,Str "are",Space,Str "substituted",Space,Str "by",Space,Str "the",Space,Str "nested",Space,Str "sequence",Space,Str "of",Space,Str "bits",Space,Str "obtained",Space,Str "by",Space,Str "joining",Space,Str "left-to-right",Space,Str "the",Space,Str "markers",Space,Str "on",Space,Str "the",Space,Str "path",Space,Str "from",Space,Str "the",Space,Str "data",Space,Str "type",Space,Str "to",Space,Str "the",Space,Str "constructor,",Space,Str "followed",Space,Str "by",Space,Str "the",Space,Str "sequences",Space,Str "corresponding",Space,Str "to",Space,Str "the",Space,Str "values",Space,Str "of",Space,Str "the",Space,Str "constructors'",Space,Str "fields."]]],Para [Str "Figure",Space,Str "6",Space,Str "shows",Space,Str "the",Space,Str "canonical",Space,Str "syntactical",Space,Str "structures",Space,Str "of",Space,Str "the",Space,Str "simple",Space,Str "data",Space,Str "types",Space,Str "discussed",Space,Str "so",Space,Str "far."],Para [Str "The",Space,Str "Unit",Space,Str "type",Space,Str "on",Space,Str "the",Space,Str "left,",Space,Str "is",Space,Str "the",Space,Str "single",Space,Str "valued",Space,Str "type:"],Para [Code ("",[],[]) "Unit \8801 Unit"],Para [Str "The",Space,Str "only",Space,Str "value",Space,Str "of",Space,Str "Unit",Space,Str "does",Space,Str "not",Space,Str "carry",Space,Str "any",Space,Str "additional",Space,Str "information",Space,Str "with",Space,Str "respect",Space,Str "to",Space,Str "its",Space,Str "type,",Space,Str "there",Space,Str "is",Space,Str "no",Space,Str "choice,",Space,Str "its",Space,Str "canonical",Space,Str "name",Space,Str "is",Space,Str "therefore",Space,Str "the",Space,Str "empty",Space,Str "sequence",Space,Code ("",[],[]) "[]",Str "."],Para [Code ("",[],[]) "Bool",Space,Str "and",Space,Code ("",[],[]) "Bit",Str ",",Space,Str "as",Space,Str "any",Space,Str "other",Space,Str "two",Space,Str "valued",Space,Str "type,",Space,Str "have",Space,Str "their",Space,Str "constructors",Space,Str "assigned",Space,Str "the",Space,Str "canonical",Space,Str "names",Space,Str "of",Space,Code ("",[],[]) "[0]",Space,Str "and",Space,Code ("",[],[]) "[1]",Space,Str "and",Space,Str "similarly",Space,Str "for",Space,Str "any",Space,Str "other",Space,Str "simple",Space,Str "type."],Para [Image ("",[],[("height","65mm")]) [Str "Simple",Space,Str "Canonical",Space,Str "Types"] ("flat/canonical.pdf","fig:")],Para [Str "Compound",Space,Str "data",Space,Str "types",Space,Str "work",Space,Str "in",Space,Str "the",Space,Str "same",Space,Str "way,",Space,Str "with",Space,Str "fields'",Space,Str "sequences",Space,Str "nested",Space,Str "into",Space,Str "the",Space,Str "constructors'",Space,Str "ones",Space,Str "(Figure",Space,Str "7)."],Para [Image ("",[],[("height","55mm")]) [Str "Compound",Space,Str "Canonical",Space,Str "Types"] ("flat/canonical-recursive.pdf","fig:")],Para [Str "For",Space,Str "example,",Space,Str "the",Space,Str "value",Space,Code ("",[],[]) "Cons False (Cons True Nil)",Space,Str "maps",Space,Str "to",Space,Code ("",[],[]) "[1,[0],[1,[1],0]]",Str "."],Para [Str "Note",Space,Str "how",Space,Str "the",Space,Code ("",[],[]) "Stream",Space,Str "constructor,",Space,Str "being",Space,Str "single,",Space,Str "maps",Space,Str "to",Space,Str "an",Space,Str "empty",Space,Str "sequence",Space,Str "so",Space,Str "that",Space,Str "a",Space,Str "Stream",Space,Str "of",Space,Str "True",Space,Str "values",Space,Str "maps",Space,Str "to",Space,Code ("",[],[]) "[[1],[[1],[[1]..]]]",Str "."],Para [Str "The",Space,Str "final",Space,Str "binary",Space,Str "encoding",Space,Str "is",Space,Str "obtained",Space,Str "by",Space,Str "flattening",Space,Str "the",Space,Str "canonical",Space,Str "names",Space,Str "(Tables",Space,Str "1-3)."],Table [Str "Unit",Space,Str "values",Space,Str "and",Space,Str "codes"] [AlignDefault,AlignDefault] [0.0,0.0] [[Plain [Str "Value"]],[Plain [Str "Code"]]] [[[Plain [Str "Unit"]],[Plain [Str "<>"]]]],Table [Str "Direction",Space,Str "values",Space,Str "and",Space,Str "codes"] [AlignDefault,AlignDefault] [0.0,0.0] [[Plain [Str "Value"]],[Plain [Str "Code"]]] [[[Plain [Str "North"]],[Plain [Str "<00>"]]],[[Plain [Str "South"]],[Plain [Str "<01>"]]],[[Plain [Str "Center"]],[Plain [Str "<10>"]]],[[Plain [Str "East"]],[Plain [Str "<110>"]]],[[Plain [Str "West"]],[Plain [Str "<111>"]]]],Table [Str "List",Space,Str "values",Space,Str "and",Space,Str "codes"] [AlignDefault,AlignDefault] [0.0,0.0] [[Plain [Str "Value"]],[Plain [Str "Code"]]] [[[Plain [Str "Nil"]],[Plain [Str "<0>"]]],[[Plain [Str "Cons",Space,Str "True",Space,Str "Nil"]],[Plain [Str "<110>"]]],[[Plain [Str "Cons",Space,Str "False",Space,Str "(Cons",Space,Str "True",Space,Str "Nil)"]],[Plain [Str "<10110>"]]]],Para [Str "The",Space,Str "Flat",Space,Str "encoding",Space,Str "is:"],BulletList [[Para [Str "Optimal:",Space,Str "takes",Space,Str "as",Space,Str "little",Space,Str "space",Space,Str "as",Space,Str "possible,",Space,Str "assuming",Space,Str "that",Space,Str "all",Space,Str "encoded",Space,Str "sequences",Space,Str "are",Space,Str "equi-probable."]],[Para [Str "Complete:",Space,Str "there",Space,Str "are",Space,Str "no",Space,Str "erroneous",Space,Str "codes,",Space,Str "if",Space,Str "the",Space,Str "decoder",Space,Str "asks",Space,Str "for",Space,Str "one",Space,Str "more",Space,Str "bit",Space,Str "it",Space,Str "can",Space,Str "always",Space,Str "interpret",Space,Str "it."]]],Para [Str "Conveniently,",Space,Str "in",Space,Str "the",Space,Str "common",Space,Str "case",Space,Str "of",Space,Str "enumerations",Space,Str "with",Space,Str "a",Space,Str "number",Space,Str "of",Space,Str "values",Space,Str "equal",Space,Str "to",Space,Str "a",Space,Str "power",Space,Str "of",Space,Str "two",Space,Str "(e.g.",Space,Code ("",[],[]) "Word8",Str "),",Space,Str "the",Space,Str "encoding",Space,Str "is",Space,Str "equivalent",Space,Str "to",Space,Str "the",Space,Str "usual",Space,Str "unsigned",Space,Str "encoding."],Header 2 ("word-alignment",[],[]) [Str "Word",Space,Str "Alignment"],Para [Str "Flat",Space,Str "is",Space,Str "a",Space,Str "bit-oriented",Space,Str "binary",Space,Str "format."],Para [Str "This",Space,Str "is",Space,Str "a",Space,Str "direct",Space,Str "consequence",Space,Str "of",Space,Str "its",Space,Str "principled",Space,Str "stance,",Space,Str "and",Space,Str "has",Space,Str "two",Space,Str "advantages:"],BulletList [[Para [Str "removes",Space,Str "any",Space,Str "arbitrary",Space,Str "dependency",Space,Str "on",Space,Str "architecture-specific",Space,Str "word",Space,Str "size"]],[Para [Str "provides",Space,Str "the",Space,Str "finest",Space,Str "possible",Space,Str "control",Space,Str "on",Space,Str "the",Space,Str "binary",Space,Str "encoding"]]],Para [Str "When",Space,Str "data",Space,Str "is",Space,Str "stored",Space,Str "or",Space,Str "transferred,",Space,Str "however,",Space,Str "we",Space,Str "need",Space,Str "to",Space,Str "take",Space,Str "account",Space,Str "of",Space,Str "the",Space,Str "fact",Space,Str "that",Space,Str "information",Space,Str "systems",Space,Str "are",Space,Str "word",Space,Str "oriented."],Para [Str "It",Space,Str "is",Space,Str "therefore",Space,Str "necessary,",Space,Str "for",Space,Str "functional",Space,Str "and",Space,Str "performance",Space,Str "reasons,",Space,Str "to",Space,Str "byte",Space,Str "or",Space,Str "word-align",Space,Str "data."],Para [Str "Following",Space,Str "Flat",Space,Str "general",Space,Str "approach,",Space,Str "this",Space,Str "can",Space,Str "be",Space,Str "done",Space,Str "simply",Space,Str "and",Space,Str "explicitly",Space,Str "by",Space,Str "embedding",Space,Str "the",Space,Str "value",Space,Str "into",Space,Str "an",Space,Str "appropriate",Space,Str "wrapper."],Para [Str "To",Space,Str "store",Space,Str "or",Space,Str "transfer",Space,Str "a",Space,Str "value",Space,Str "to",Space,Str "another",Space,Str "system,",Space,Str "it",Space,Str "should",Space,Str "be",Space,Str "post-aligned",Space,Str "so",Space,Str "that",Space,Str "it",Space,Str "fills",Space,Str "into",Space,Str "the",Space,Str "required",Space,Str "word",Space,Str "size:"],CodeBlock ("",[],[]) "-- A PostAligned value (\"a\" is a parameter standing for any possible type)\nPostAligned a \8801 PreAligned a Filler\n\n-- A meaningless sequence of 0 bits terminated with a 1 bit.\nFiller \8801 FillerBit Filler | FillerEnd",Para [Str "An",Space,Str "intelligent",Space,Str "encoder,",Space,Str "aware",Space,Str "of",Space,Str "the",Space,Str "word",Space,Str "size",Space,Str "required",Space,Str "by",Space,Str "the",Space,Str "destination",Space,Str "system,",Space,Str "can",Space,Str "modify",Space,Str "the",Space,Str "size",Space,Str "of",Space,Str "the",Space,Str "Filler",Space,Str "to",Space,Str "align",Space,Str "the",Space,Str "data."],Para [Str "For",Space,Str "example,",Space,Str "the",Space,Str "boolean",Space,Str "value",Space,Code ("",[],[]) "True",Space,Str "embedded",Space,Str "into",Space,Str "a",Space,Code ("",[],[]) "PostAligned Bool",Space,Str "when",Space,Str "sent",Space,Str "to",Space,Str "a",Space,Str "byte-oriented",Space,Str "device",Space,Str "would",Space,Str "be",Space,Str "encoded",Space,Str "as",Space,Code ("",[],[]) "<10000001>",Space,Str "where",Space,Code ("",[],[]) "<1>",Space,Str "is",Space,Str "the",Space,Str "encoding",Space,Str "of",Space,Str "'True'",Space,Str "and",Space,Code ("",[],[]) "<0000001>",Space,Str "is",Space,Str "the",Space,Str "Filler."],Para [Str "Similarly,",Space,Str "to",Space,Str "optimise",Space,Str "the",Space,Str "transfer",Space,Str "of",Space,Str "values",Space,Str "that",Space,Str "encode",Space,Str "large",Space,Str "binary",Space,Str "sequences,",Space,Str "it",Space,Str "is",Space,Str "useful",Space,Str "to",Space,Str "pre-align",Space,Str "them",Space,Str "using",Space,Code ("",[],[]) "PreAligned",Str ":"],CodeBlock ("",[],[]) "-- A PreAligned value (\"a\" is a parameter standing for any possible type)\nPreAligned a \8801 PreAligned Filler a",Para [Str "A",Space,Str "smart",Space,Str "decoder",Space,Str "will",Space,Str "take",Space,Str "advantage",Space,Str "of",Space,Str "the",Space,Str "fact",Space,Str "that",Space,Str "data",Space,Str "is",Space,Str "aligned,",Space,Str "using",Space,Str "fast",Space,Str "byte-aligned",Space,Str "operations",Space,Str "to",Space,Str "read",Space,Str "in",Space,Str "the",Space,Str "data."],Para [Str "Naive",Space,Str "decoders",Space,Str "will",Space,Str "still",Space,Str "work",Space,Str "correctly",Space,Str "as",Space,Code ("",[],[]) "PreAligned",Str ",",Code ("",[],[]) "PostAligned",Space,Str "and",Space,Code ("",[],[]) "Filler",Space,Str "are",Space,Str "just",Space,Str "normal",Space,Str "data",Space,Str "types",Space,Str "subject",Space,Str "to",Space,Str "the",Space,Str "usual",Space,Str "Flat",Space,Str "encoding."],Header 2 ("normative-definitions",[],[]) [Str "Normative",Space,Str "Definitions"],Para [Str "A",Space,Str "binary",Space,Str "data",Space,Str "format",Space,Str "is",Space,Str "an",Space,Str "isomorphism",Space,Str "between",Space,Str "data",Space,Str "values",Space,Str "and",Space,Str "binary",Space,Str "sequences."],Para [Str "Every",Space,Str "value",Space,Str "has",Space,Str "a",Space,Str "data",Space,Str "type."],Para [Str "A",Space,Str "data",Space,Str "type",Space,Str "consists",Space,Str "in",Space,Str "a",Space,Str "balanced,",Space,Str "right-heavy,",Space,Str "binary",Space,Str "tree",Space,Str "whose",Space,Str "leaves",Space,Str "are",Space,Str "values",Space,Str "and",Space,Str "whose",Space,Str "internal",Space,Str "nodes",Space,Str "have",Space,Str "a",Space,Str "left",Space,Str "and",Space,Str "right",Space,Str "arrow,",Space,Str "respectively",Space,Str "marked",Space,Str "with",Space,Str "a",Space,Code ("",[],[]) "0",Space,Str "and",Space,Str "a",Space,Code ("",[],[]) "1",Space,Str "bit."],Para [Str "A",Space,Str "value",Space,Str "is",Space,Str "a",Space,Str "(possibly",Space,Str "empty)",Space,Str "sequence",Space,Str "of",Space,Str "fields",Space,Str "each",Space,Str "of",Space,Str "which",Space,Str "points",Space,Str "to",Space,Str "a",Space,Str "data",Space,Str "type."],Para [Str "The",Space,Str "binary",Space,Str "sequence",Space,Str "corresponding",Space,Str "to",Space,Str "a",Space,Str "value",Space,Str "is",Space,Str "obtained",Space,Str "by",Space,Str "joining",Space,Str "left-to-right",Space,Str "the",Space,Str "markers",Space,Str "on",Space,Str "the",Space,Str "path",Space,Str "from",Space,Str "the",Space,Str "root",Space,Str "of",Space,Str "the",Space,Str "data",Space,Str "type",Space,Str "to",Space,Str "the",Space,Str "value,",Space,Str "followed",Space,Str "by",Space,Str "the",Space,Str "sequences",Space,Str "corresponding",Space,Str "to",Space,Str "the",Space,Str "values",Space,Str "in",Space,Str "the",Space,Str "values'",Space,Str "fields."],Header 2 ("about-this-document",[],[]) [Str "About",Space,Str "This",Space,Str "Document"],Para [Str "The",Space,Str "only",Space,Str "normative",Space,Str "part",Space,Str "of",Space,Str "this",Space,Str "spec",Space,Str "is",Space,Link ("",[],[]) [Str "Normative",Space,Str "Definitions"] ("#normative-definitions",""),Str ",",Space,Str "the",Space,Str "rest",Space,Str "is",Space,Str "narrative."],Table [Str "Document",Space,Str "Metadata."] [AlignLeft,AlignLeft] [0.0,0.0] [[],[]] [[[Plain [Str "Status"]],[Plain [Str "Draft"]]],[[Plain [Str "Reference",Space,Str "URL"]],[Plain [Str "http://quid2.org/docs/Flat.pdf"]]],[[Plain [Str "License"]],[Plain [Str "GPLv3",Space,Str "(http://www.gnu.org/licenses/gpl-3.0.en.html)"]]],[[Plain [Str "First",Space,Str "Published"]],[Plain [Str "2016-05-27"]]],[[Plain [Str "Last",Space,Str "Revision"]],[Plain [Str "2016-05-27"]]],[[Plain [Str "Copyright",Space,Str "\169"]],[Plain [Str "Pasqualino",Space,Str "\"Titto\"",Space,Str "Assini",Space,Str "(tittoassini@gmail.com)"]]]]]