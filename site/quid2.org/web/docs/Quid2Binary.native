Pandoc (Meta {unMeta = fromList [("author",MetaList [MetaInlines [Str "Pasqualino",Space,Str "`Titto'",Space,Str "Assini",Space,Str "(tittoassini@gmail.com)"]]),("date",MetaInlines [Str "11",Superscript [Str "th"],Space,Str "of",Space,Str "November",Space,Str "2015"]),("title",MetaInlines [Str "Quid2",Space,Str "Binary",Space,Str "(First",Space,Str "Draft)"])]}) [Para [Str "For",Space,Str "more",Space,Str "information",Space,Str "and",Space,Str "the",Space,Str "most",Space,Str "recent",Space,Str "version",Space,Str "of",Space,Str "this",Space,Str "specification",Space,Str "check",Space,Link [Str "http://quid2.org"] ("http://quid2.org",""),Str "."],Header 1 ("quid2-bits",[],[]) [Str "Quid2",Space,Str "Bits"],Para [Str "Quid2",Space,Str "Binary",Space,Str "is",Space,Str "an",Space,Str "universal",Space,Str "data",Space,Str "encoding",Space,Str "system."],Header 2 ("design-goals",[],[]) [Str "Design",Space,Str "Goals"],Para [Str "The",Space,Str "universality",Space,Str "of",Space,Str "an",Space,Str "encoding",Space,Str "system",Space,Str "can",Space,Str "be",Space,Str "measured",Space,Str "along",Space,Str "at",Space,Str "least",Space,Str "three",Space,Str "different",Space,Str "coordinates:",Space,Str "-",Space,Str "Expressivity:",Space,Str "capacity",Space,Str "of",Space,Str "faithfully",Space,Str "representing",Space,Str "data",Space,Str "structures.",Space,Str "-",Space,Str "Space:",Space,Str "suitability",Space,Str "for",Space,Str "information",Space,Str "systems",Space,Str "of",Space,Str "any",Space,Str "level",Space,Str "of",Space,Str "complexity",Space,Str "(nanosystems",Space,Str "to",Space,Str "mainframes).",Space,Str "-",Space,Str "Time:",Space,Str "suitability",Space,Str "for",Space,Str "long",Space,Str "term",Space,Str "storage",Space,Str "of",Space,Str "data."],BulletList [[Para [Str "Simple",Space,Str "to",Space,Str "implement.",Space,Str "A",Space,Str "single",Space,Str "encoding/decoding",Space,Str "rule.",Space,Str "No",Space,Str "need",Space,Str "to",Space,Str "support",Space,Str "a",Space,Str "range",Space,Str "of",Space,Str "'primitive",Space,Str "types'",Space,Str "unless",Space,Str "they",Space,Str "are",Space,Str "needed",Space,Str "by",Space,Str "your",Space,Str "system."]],[Para [Str "Efficient.",Space,Str "Fast",Space,Str "and",Space,Str "optimal",Space,Str "bit-oriented",Space,Str "encoding."]]],Para [Str "Quid2",Space,Str "Binary",Space,Str "aims",Space,Str "to",Space,Str "score",Space,Str "highly",Space,Str "on",Space,Str "the",Space,Str "first",Space,Str "two?",Space,Str "/",Space,Str "three",Space,Str "dimensions",Space,Str "by",Space,Str "adopting",Space,Str "these",Space,Str "design",Space,Str "principles:"],Para [Str "Quid2",Space,Str "Bits",Space,Str "is",Space,Str "a",Space,Str "principled,",Space,Str "simple",Space,Str "and",Space,Str "efficient",Space,Str "data",Space,Str "encoding",Space,Str "."],Para [Str "of",Space,Str "values",Space,Str "of",Space,Str "known",Space,Str "data",Space,Str "types."],Para [Str "rather",Space,Str "than",Space,Str "being",Space,Str "based",Space,Str "on",Space,Str "a",Space,Str "fixed",Space,Str "set",Space,Str "of",Space,Str "predefined",Space,Str "data",Space,Str "structures,",Space,Str "Quid2",Space,Str "Bits",Space,Str "can",Space,Str "encode",Space,Str "values",Space,Str "of",Space,Str "any",Space,Str "user-defined",Space,Str "data",Space,Str "type."],BulletList [[Plain [Str "Discovered,",Space,Str "not",Space,Str "invented.",Space,Str "Based",Space,Str "on",Space,Str "the",Space,Str "simplest",Space,Str "possible",Space,Str "abstractions",Space,Str "and",Space,Str "free",Space,Str "from",Space,Str "arbitrary",Space,Str "and",Space,Str "limiting",Space,Str "decisions",Space,Str "regarding",Space,Str "supported",Space,Str "data",Space,Str "structures",Space,Str "or",Space,Str "primitive",Space,Str "types."]]],Para [Str "These",Space,Str "goals",Space,Str "have",Space,Str "led",Space,Str "to",Space,Str "an",Space,Str "unusual",Space,Str "design",Space,Str "that",Space,Str "is",Space,Str "quite",Space,Str "different",Space,Str "from",Space,Str "most",Space,Str "existing",Space,Str "data",Space,Str "interchange",Space,Str "standard:",Space,Str "no",Space,Str "built-in",Space,Str "data",Space,Str "structures",Space,Str "or",Space,Str "primitive",Space,Str "types",Space,Str "of",Space,Str "any",Space,Str "kind,",Space,Str "bit-encoded",Space,Str "rather",Space,Str "than",Space,Str "byte-encoded",Space,Str "and"],Para [Str "Design",Space,Str "Non-Goals:"],Para [Str "Bit-encoding:"],Para [Str "Different",Space,Str "architectures",Space,Str "use",Space,Str "different",Space,Str "word",Space,Str "sizes",Space,Str "(though",Space,Str "currently",Space,Str "they",Space,Str "are",Space,Str "all",Space,Str "2-powers",Space,Str "of",Space,Str "bytes)."],Para [Str "The",Space,Str "bit",Space,Str "is",Space,Str "the",Space,Str "only",Space,Str "primitive",Space,Str "and",Space,Str "non-arbitrary",Space,Str "unit",Space,Str "of",Space,Str "information."],Para [Str "For",Space,Str "transmission/storage",Space,Str "bits",Space,Str "sequences",Space,Str "need",Space,Str "to",Space,Str "be",Space,Str "mapped",Space,Str "to",Space,Str "words",Space,Str "but",Space,Str "this",Space,Str "is",Space,Str "external",Space,Str "to",Space,Str "the",Space,Str "system."],Para [Str "Quid2",Space,Str "binary",Space,Str "defines",Space,Str "a",Space,Str "1-N",Space,Str "mapping",Space,Str "between",Space,Str "values",Space,Str "of",Space,Str "any",Space,Str "algebraic",Space,Str "data",Space,Str "type,",Space,Str "as",Space,Str "defined",Space,Str "in",Space,Str "Quid2",Space,Str "Model,",Space,Str "and",Space,Str "binary",Space,Str "sequences."],Header 2 ("definitions",[],[]) [Str "Definitions"],Para [Str "A",Space,Str "data",Space,Str "type",Space,Str "is",Space,Str "composed",Space,Str "by",Space,Str "a",Space,Str "name",Space,Str "and",Space,Str "a",Space,Str "constructors",Space,Str "tree."],Para [Str "A",Space,Str "constructors",Space,Str "tree",Space,Str "is",Space,Str "a",Space,Str "balanced,",Space,Str "right-heavy,",Space,Str "binary",Space,Str "tree",Space,Str "whose",Space,Str "leaves",Space,Str "are",Space,Str "constructors",Space,Str "and",Space,Str "whose",Space,Str "internal",Space,Str "nodes",Space,Str "have",Space,Str "a",Space,Str "left",Space,Str "and",Space,Str "right",Space,Str "arrow,",Space,Str "respectively",Space,Str "marked",Space,Str "with",Space,Str "a",Space,Code ("",[],[]) "0",Space,Str "and",Space,Str "a",Space,Code ("",[],[]) "1",Space,Str "bit."],Para [Str "A",Space,Str "constructor",Space,Str "is",Space,Str "composed",Space,Str "by",Space,Str "a",Space,Str "name",Space,Str "(unique",Space,Str "in",Space,Str "the",Space,Str "data",Space,Str "type)",Space,Str "and",Space,Str "a",Space,Str "(possibly",Space,Str "empty)",Space,Str "sequence",Space,Str "of",Space,Str "fields",Space,Str "each",Space,Str "of",Space,Str "which",Space,Str "points",Space,Str "to",Space,Str "a",Space,Str "data",Space,Str "type."],Para [Str "A",Space,Str "value",Space,Str "is",Space,Str "a"],Header 2 ("examples",[],[]) [Str "Examples"],Para [Image [Str "Simple",Space,Str "types"] ("binary-simple.pdf","fig:")],Para [Str "The",Space,Str "figure",Space,Str "shows",Space,Str "some",Space,Str "simple",Space,Str "data",Space,Str "types,",Space,Str "with",Space,Str "one",Space,Str "(",Code ("",[],[]) "Unit",Str "),",Space,Str "two",Space,Str "(",Code ("",[],[]) "Bool",Str ")",Space,Str "or",Space,Str "five",Space,Str "(",Code ("",[],[]) "N",Str ")",Space,Str "constructors",Space,Str "with",Space,Str "no",Space,Str "fields."],Para [Str "Note",Space,Str "how",Space,Str "the",Space,Str "5",Space,Str "constructors",Space,Str "of",Space,Str "N",Space,Str "are",Space,Str "split",Space,Str "in",Space,Str "groups",Space,Str "of",Space,Str "2",Space,Str "and",Space,Str "3",Space,Str "(balanced",Space,Str "and",Space,Str "right-heavy)",Space,Str "and",Space,Str "the",Space,Str "right",Space,Str "group",Space,Str "of",Space,Str "3",Space,Str "constructors",Space,Str "is",Space,Str "split",Space,Str "in",Space,Str "groups",Space,Str "of",Space,Str "1",Space,Str "and",Space,Str "2."],Para [Image [Str "A",Space,Str "List",Space,Str "of",Space,Str "Booleans"] ("binary-listbool.pdf","fig:")],Para [Str "A",Space,Str "more",Space,Str "complex",Space,Str "example,",Space,Str "a",Space,Str "list",Space,Str "of",Space,Str "booleans."],Para [Str "A",Space,Code ("",[],[]) "List",Space,Str "is",Space,Str "either",Space,Str "a",Space,Code ("",[],[]) "Nil",Space,Str "(a",Space,Str "0-length",Space,Str "list)",Space,Str "or",Space,Str "a",Space,Code ("",[],[]) "Cons",Space,Str "constructor",Space,Str "with",Space,Str "two",Space,Str "fields,",Space,Str "the",Space,Str "first",Space,Str "pointing",Space,Str "to",Space,Str "a",Space,Code ("",[],[]) "Bool",Space,Str "and",Space,Str "the",Space,Str "second",Space,Str "to",Space,Str "the",Space,Code ("",[],[]) "List Bool",Space,Str "itself."],Para [Str "We",Space,Str "can",Space,Str "also",Space,Str "have",Space,Str "infinite",Space,Str "(codata)",Space,Str "data",Space,Str "types."],Para [Str "A",Space,Code ("",[],[]) "Bool",Space,Str "is",Space,Str "necessarily",Space,Str "finite,",Space,Str "a",Space,Code ("",[],[]) "List",Space,Str "can",Space,Str "be",Space,Str "be",Space,Str "finite,",Space,Str "Stream",Space,Str "is",Space,Str "by",Space,Str "definition",Space,Str "infinite."],Para [Str "Being",Space,Str "infinite,",Space,Str "Stream",Space,Str "cannot",Space,Str "be",Space,Str "a",Space,Str "static",Space,Str "data",Space,Str "structure,",Space,Str "both",Space,Str "and",Space,Str "encoder",Space,Str "and",Space,Str "a",Space,Str "decoder",Space,Str "are",Space,Str "processes",Space,Str "that",Space,Str "either",Space,Str "produce",Space,Str "or",Space,Str "consume",Space,Str "a",Space,Str "bit",Space,Str "stream."],Para [Str "The",Space,Str "set",Space,Str "of",Space,Str "values",Space,Str "of",Space,Str "Bool",Space,Str "..",Space,Str "is",Space,Str "finite,",Space,Str "that",Space,Str "of",Space,Str "values",Space,Str "of",Space,Str "List",Space,Str "Bool",Space,Str "(any",Space,Str "list?)",Space,Str "is",Space,Str "countable,",Space,Str "what",Space,Str "about",Space,Str "a",Space,Str "Stream",Space,Str "Bool"],Para [Image [Str "A",Space,Str "Stream",Space,Str "of",Space,Str "Booleans"] ("binary-streambool.pdf","fig:")],Table [Str "Boolean",Space,Str "values",Space,Str "and",Space,Str "codes"] [AlignDefault,AlignDefault] [0.0,0.0] [[Plain [Str "Value"]],[Plain [Str "Code"]]] [[[Plain [Str "False"]],[Plain [Str "0"]]],[[Plain [Str "True"]],[Plain [Str "1"]]]],Table [Str "N",Space,Str "values",Space,Str "and",Space,Str "codes"] [AlignDefault,AlignDefault] [0.0,0.0] [[Plain [Str "Value"]],[Plain [Str "Code"]]] [[[Plain [Str "One"]],[Plain [Str "00"]]],[[Plain [Str "Two"]],[Plain [Str "01"]]],[[Plain [Str "Three"]],[Plain [Str "10"]]],[[Plain [Str "Four"]],[Plain [Str "110"]]],[[Plain [Str "Five"]],[Plain [Str "111"]]]],Table [Str "List",Space,Str "values",Space,Str "and",Space,Str "codes"] [AlignDefault,AlignDefault] [0.0,0.0] [[Plain [Str "Value"]],[Plain [Str "Code"]]] [[[Plain [Str "Nil"]],[Plain [Str "0"]]],[[Plain [Str "Cons",Space,Str "True",Space,Str "Nil"]],[Plain [Str "110"]]],[[Plain [Str "Cons",Space,Str "False",Space,Str "(Cons",Space,Str "True",Space,Str "Nil)"]],[Plain [Str "10110"]]]],Header 2 ("coding-rule",[],[]) [Str "Coding",Space,Str "Rule"],Para [Str "The",Space,Str "code",Space,Str "of",Space,Str "a",Space,Str "value",Space,Str "is",Space,Str "the",Space,Str "sequence",Space,Str "of",Space,Str "bits",Space,Str "obtained",Space,Str "by",Space,Str "joining",Space,Str "left-to-right",Space,Str "the",Space,Str "markers",Space,Str "on",Space,Str "the",Space,Str "path",Space,Str "from",Space,Str "the",Space,Str "data",Space,Str "type",Space,Str "to",Space,Str "the",Space,Str "value",Space,Str "constructor,",Space,Str "followed",Space,Str "by",Space,Str "the",Space,Str "code",Space,Str "of",Space,Str "the",Space,Str "values",Space,Str "in",Space,Str "the",Space,Str "constructors'",Space,Str "fields."],Para [Str "Data",Space,Str "types",Space,Str "with",Space,Str "single",Space,Str "constructor",Space,Str "have",Space,Str "0-length",Space,Str "codes."],Para [Str "Optimal",Space,Str "encoding:",Space,Str "takes",Space,Str "as",Space,Str "little",Space,Str "space",Space,Str "as",Space,Str "possible",Space,Str "assuming",Space,Str "that",Space,Str "all",Space,Str "encoded",Space,Str "sequences",Space,Str "are",Space,Str "equi-probable."],Para [Str "Complete",Space,Str "encoding:",Space,Str "there",Space,Str "are",Space,Str "no",Space,Str "erroneous",Space,Str "codes,",Space,Str "if",Space,Str "the",Space,Str "decoder",Space,Str "asks",Space,Str "for",Space,Str "one",Space,Str "more",Space,Str "bit",Space,Str "it",Space,Str "can",Space,Str "always",Space,Str "interpret",Space,Str "it."],Para [Str "Multiple"],Para [Str "--",Space,Str "Example,",Space,Str "see",Space,Str "file:///Users/titto/workspace/quid2/tests/tree5.svg",Space,Str "data",Space,Str "L",Space,Str "=",Space,Str "A",Space,Str "|",Space,Str "B",Space,Str "|",Space,Str "C",Space,Str "|",Space,Str "D",Space,Str "|",Space,Str "E"],Header 2 ("optimised-encoding-and-decoding",[],[]) [Str "Optimised",Space,Str "Encoding",Space,Str "and",Space,Str "Decoding"],Para [Str "Conveniently,",Space,Str "when",Space,Str "the",Space,Str "number",Space,Str "of",Space,Str "constructor",Space,Str "is",Space,Str "a",Space,Str "power",Space,Str "of",Space,Str "two,",Space,Str "this",Space,Str "bit",Space,Str "encoding",Space,Str "is",Space,Str "equivalent",Space,Str "to",Space,Str "the",Space,Str "usual",Space,Str "unsigned",Space,Str "encoding,",Space,Str "see",Space,Str "file:///Users/titto/workspace/quid2/tests/tree8.svg"],Para [Str "A",Space,Str "smart",Space,Str "encoder/decoder",Space,Str "will",Space,Str "just",Space,Str "write/read",Space,Str "a",Space,Str "byte",Space,Str "to",Space,Str "encode/decode",Space,Str "a",Space,Str "Word8,",Space,Str "no",Space,Code ("",[],[]) "tree traversal",Space,Str "necessary.",Space,Str "*",Space,Str "No",Space,Str "assumption",Space,Str "on",Space,Str "word-size:",Space,Str "bit-encoding",Space,Str "rather",Space,Str "than",Space,Str "byte",Space,Str "or",Space,Str "word-encoding."]]